@tool
extends EditorPlugin

const AUTOLOAD_RUNNER = "NetworkRunner"
const AUTOLOAD_STATE_MANAGER = "NetworkStateManager"
const MainPanel = preload("res://addons/HLNC/editor_plugin/main_screen.tscn")

var main_panel_instance

func _build():
	main_panel_instance.get_node("TabBar/RealtimeMonitor").start_server()
	return true

func _enter_tree():
	var editor_file_system = get_editor_interface().get_resource_filesystem()
	var dir = DirAccess.open("res://")
	dir.make_dir_recursive("res://HLNC/generated")
	if not FileAccess.file_exists("res://HLNC/generated/registered_nodes.gd"):
		var file = FileAccess.open("res://HLNC/generated/registered_nodes.gd",FileAccess.WRITE)
		var content = """# DO NOT EDIT
	# This file is automatically generated
	@tool
	class_name NetworkRegistry extends Node

	enum NETWORK_SCENES {
		NONE
	}
	static var SCENES_MAP: Dictionary = {}
	static var PATH_PACK: Dictionary = {}"""
		file.store_string(content)
		file.close()
		editor_file_system.reimport_files(["res://HLNC/generated/registered_nodes.gd"])
		editor_file_system.scan()
	add_autoload_singleton(AUTOLOAD_RUNNER, "res://addons/HLNC/NetworkRunner.gd")
	add_autoload_singleton(AUTOLOAD_STATE_MANAGER, "res://addons/HLNC/NetworkStateManager.gd")
	main_panel_instance = MainPanel.instantiate()
	# Add the main panel to the editor's main viewport.
	get_editor_interface().get_editor_main_screen().add_child(main_panel_instance)
	var network_nodes_controller = main_panel_instance.get_node("TabBar/Settings/NetworkNodes")
	network_nodes_controller.dock_file_system = get_editor_interface().get_file_system_dock()
	network_nodes_controller.editor_file_system = editor_file_system
	# network_nodes_controller.refresh()
	# Hide the main panel. Very much required.
	_make_visible(false)


func _exit_tree():
	if main_panel_instance:
		main_panel_instance.queue_free()
	remove_autoload_singleton(AUTOLOAD_STATE_MANAGER)
	remove_autoload_singleton(AUTOLOAD_RUNNER)


func _has_main_screen():
	return true


func _make_visible(visible):
	if main_panel_instance:
		main_panel_instance.visible = visible


func _get_plugin_name():
	return "Network"


func _get_plugin_icon():
	# Must return some kind of Texture for the icon.
	return get_editor_interface().get_base_control().get_theme_icon("Signals", "EditorIcons")
