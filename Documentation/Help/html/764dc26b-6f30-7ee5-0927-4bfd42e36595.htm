<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>NetworkTransform Properties</title><meta name="Title" content="Properties" /><meta name="Help.Id" content="Properties.T:HLNC.NetworkTransform" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="HLNC" /><meta name="guid" content="764dc26b-6f30-7ee5-0927-4bfd42e36595" /><meta name="tocFile" content="../toc/ID0AB0C.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Network<wbr />Transform Properties</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDADASection"><table id="PropertyList" class="table is-hoverable"><tr><td><span class="noLink">AutoTranslateMode</span></td><td><p>Defines if any text should automatically change to its translated version depending on the current locale (for nodes such as <span class="noLink">Label</span>, <span class="noLink">RichTextLabel</span>, <span class="noLink">Window</span>, etc.). Also decides if the node's strings should be parsed for POT generation.</p><p><b>Note:</b> For the root node, auto translate mode can also be set via <span class="code">ProjectSettings.internationalization/rendering/root_node_auto_translate</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Basis</span></td><td><p>Basis of the <span class="noLink">Transform</span> property. Represents the rotation, scale, and shear of this node.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">EditorDescription</span></td><td><p>An optional description to the node. It will be displayed as a tooltip when hovering over the node in the editor's Scene dock.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GlobalBasis</span></td><td><p>Global basis of this node. This is equivalent to <span class="code">global_transform.basis</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalPosition</span></td><td><p>Global position of this node. This is equivalent to <span class="code">global_transform.origin</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalRotation</span></td><td><p>Rotation part of the global transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).</p><p><b>Note:</b> In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a <span class="noLink">Vector3</span> data structure not because the rotation is a vector, but only because <span class="noLink">Vector3</span> exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalRotationDegrees</span></td><td><p>Helper property to access <span class="noLink">GlobalRotation</span> in degrees instead of radians.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalTransform</span></td><td><p>World3D space (global) <span class="noLink">Transform3D</span> of this node.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><a href="97cc285f-e42e-65bf-e0d6-a0726948f74e.htm">InputAuthority</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><a href="16aaef9d-688f-f644-ced0-95290ad57ad9.htm">IsCurrentOwner</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><a href="9874d963-c6e1-a467-30dd-f4941ca09d84.htm">IsTeleporting</a></td><td> </td></tr><tr><td><span class="noLink">Multiplayer</span></td><td><p>The <span class="noLink">MultiplayerApi</span> instance associated with this node. See <span class="noLink">GetMultiplayer(NodePath)</span>.</p><p><b>Note:</b> Renaming the node, or moving it in the tree, will not move the <span class="noLink">MultiplayerApi</span> to the new path, you will have to update this manually.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Name</span></td><td><p>The name of the node. This name must be unique among the siblings (other child nodes from the same parent). When set to an existing sibling's name, the node is automatically renamed.</p><p><b>Note:</b> When changing the name, the following characters will be replaced with an underscore: (<span class="code">.</span><span class="code">:</span><span class="code">@</span><span class="code">/</span><span class="code">"</span><span class="code">%</span>). In particular, the <span class="code">@</span> character is reserved for auto-generated names. See also <span class="code">String.validate_node_name</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">NativeInstance</span></td><td>
            The pointer to the native instance of this <span class="noLink">GodotObject</span>.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="b838391a-4972-c726-1eb0-b82bf3b90f9f.htm">NetPosition</a></td><td> </td></tr><tr><td><a href="70f84cb7-6982-4c5c-a1d3-b7b26b5f61a9.htm">NetRotation</a></td><td> </td></tr><tr><td><a href="ef7779e9-49da-c92f-0098-677917f3c19e.htm">NetworkId</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">Owner</span></td><td><p>The owner of this node. The owner must be an ancestor of this node. When packing the owner node in a <span class="noLink">PackedScene</span>, all the nodes it owns are also saved with it.</p><p><b>Note:</b> In the editor, nodes not owned by the scene root are usually not displayed in the Scene dock, and will <b>not</b> be saved. To prevent this, remember to set the owner after calling <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>. See also (see <span class="noLink">UniqueNameInOwner</span>)</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">PhysicsInterpolationMode</span></td><td><p>Allows enabling or disabling physics interpolation per node, offering a finer grain of control than turning physics interpolation on and off globally. See <span class="code">ProjectSettings.physics/common/physics_interpolation</span> and <span class="noLink">PhysicsInterpolation</span> for the global setting.</p><p><b>Note:</b> When teleporting a node to a distant position you should temporarily disable interpolation with <span class="noLink">ResetPhysicsInterpolation<span id="LST8A457180_0" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Position</span></td><td><p>Local position or translation of this node relative to the parent. This is equivalent to <span class="code">transform.origin</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">ProcessMode</span></td><td><p>The node's processing behavior (see <span class="noLink">ProcessModeEnum</span>). To check if the node can process in its current mode, use <span class="noLink">CanProcess<span id="LST8A457180_1" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessPhysicsPriority</span></td><td><p>Similar to <span class="noLink">ProcessPriority</span> but for <span class="noLink">NotificationPhysicsProcess</span>, <span class="noLink">_PhysicsProcess(Double)</span> or the internal version.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessPriority</span></td><td><p>The node's execution order of the process callbacks (<span class="noLink">_Process(Double)</span>, <span class="noLink">_PhysicsProcess(Double)</span>, and internal processing). Nodes whose priority value is <i>lower</i> call their process callbacks first, regardless of tree order.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessThreadGroup</span></td><td><p>Set the process thread group for this node (basically, whether it receives <span class="noLink">NotificationProcess</span>, <span class="noLink">NotificationPhysicsProcess</span>, <span class="noLink">_Process(Double)</span> or <span class="noLink">_PhysicsProcess(Double)</span> (and the internal versions) on the main thread or in a sub-thread.</p><p>By default, the thread group is <span class="noLink">Inherit</span>, which means that this node belongs to the same thread group as the parent node. The thread groups means that nodes in a specific thread group will process together, separate to other thread groups (depending on <span class="noLink">ProcessThreadGroupOrder</span>). If the value is set is <span class="noLink">SubThread</span>, this thread group will occur on a sub thread (not the main thread), otherwise if set to <span class="noLink">MainThread</span> it will process on the main thread. If there is not a parent or grandparent node set to something other than inherit, the node will belong to the <i>default thread group</i>. This default group will process on the main thread and its group order is 0.</p><p>During processing in a sub-thread, accessing most functions in nodes outside the thread group is forbidden (and it will result in an error in debug mode). Use <span class="noLink">CallDeferred(StringName, <span id="LST8A457180_2" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LST8A457180_3" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, <span class="noLink">CallThreadSafe(StringName, <span id="LST8A457180_4" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LST8A457180_5" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, <span class="noLink">CallDeferredThreadGroup(StringName, <span id="LST8A457180_6" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LST8A457180_7" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> and the likes in order to communicate from the thread groups to the main thread (or to other thread groups).</p><p>To better understand process thread groups, the idea is that any node set to any other value than <span class="noLink">Inherit</span> will include any child (and grandchild) nodes set to inherit into its process thread group. This means that the processing of all the nodes in the group will happen together, at the same time as the node including them.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessThreadGroupOrder</span></td><td><p>Change the process thread group order. Groups with a lesser order will process before groups with a greater order. This is useful when a large amount of nodes process in sub thread and, afterwards, another group wants to collect their result in the main thread, as an example.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessThreadMessages</span></td><td><p>Set whether the current thread group will process messages (calls to <span class="noLink">CallDeferredThreadGroup(StringName, <span id="LST8A457180_8" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LST8A457180_9" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> on threads), and whether it wants to receive them during regular process or physics process callbacks.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Quaternion</span></td><td><p>Access to the node rotation as a <span class="noLink">Quaternion</span>. This property is ideal for tweening complex rotations.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Rotation</span></td><td><p>Rotation part of the local transformation in radians, specified in terms of Euler angles. The angles construct a rotation in the order specified by the <span class="noLink">RotationOrder</span> property.</p><p><b>Note:</b> In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a <span class="noLink">Vector3</span> data structure not because the rotation is a vector, but only because <span class="noLink">Vector3</span> exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.</p><p><b>Note:</b> This property is edited in the inspector in degrees. If you want to use degrees in a script, use <span class="noLink">RotationDegrees</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotationDegrees</span></td><td><p>Helper property to access <span class="noLink">Rotation</span> in degrees instead of radians.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotationEditMode</span></td><td><p>Specify how rotation (and scale) will be presented in the editor.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotationOrder</span></td><td><p>Specify the axis rotation order of the <span class="noLink">Rotation</span> property. The final orientation is constructed by rotating the Euler angles in the order specified by this property.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Scale</span></td><td><p>Scale part of the local transformation.</p><p><b>Note:</b> Mixed negative scales in 3D are not decomposable from the transformation matrix. Due to the way scale is represented with transformation matrices in Godot, the scale values will either be all positive or all negative.</p><p><b>Note:</b> Not all nodes are visually scaled by the <span class="noLink">Scale</span> property. For example, <span class="noLink">Light3D</span>s are not visually affected by <span class="noLink">Scale</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">SceneFilePath</span></td><td><p>The original scene's file path, if the node has been instantiated from a <span class="noLink">PackedScene</span> file. Only scene root nodes contains this.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="5ab0a1ed-6114-3897-d4e9-2b35bd8db1f1.htm">Serializers</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><a href="d4198f23-cba0-81c5-a2f7-e85337a74c37.htm">TargetNode</a></td><td> </td></tr><tr><td><span class="noLink">TopLevel</span></td><td><p>If <span class="keyword"><span id="LST8A457180_10" data-languageSpecificText="vb=True|nu=true"></span></span>, the node will not inherit its transformations from its parent. Node transformations are only in global space.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Transform</span></td><td><p>Local space <span class="noLink">Transform3D</span> of this node, with respect to the parent node.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">UniqueNameInOwner</span></td><td><p>If <span class="keyword"><span id="LST8A457180_11" data-languageSpecificText="vb=True|nu=true"></span></span>, the node can be accessed from any node sharing the same <span class="noLink">Owner</span> or from the <span class="noLink">Owner</span> itself, with special <span class="code">%Name</span> syntax in <span class="noLink">GetNode(NodePath)</span>.</p><p><b>Note:</b> If another node with the same <span class="noLink">Owner</span> shares the same <span class="noLink">Name</span> as this node, the other node will no longer be accessible as unique.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">VisibilityParent</span></td><td><p>Defines the visibility range parent for this node and its subtree. The visibility parent must be a GeometryInstance3D. Any visual instance will only be visible if the visibility parent (and all of its visibility ancestors) is hidden by being closer to the camera than its own <span class="noLink">VisibilityRangeBegin</span>. Nodes hidden via the <span class="noLink">Visible</span> property are essentially removed from the visibility dependency tree, so dependent instances will not take the hidden node or its ancestors into account.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Visible</span></td><td><p>If <span class="keyword"><span id="LST8A457180_12" data-languageSpecificText="vb=True|nu=true"></span></span>, this node is drawn. The node is only visible if all of its ancestors are visible as well (in other words, <span class="noLink">IsVisibleInTree<span id="LST8A457180_13" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> must return <span class="keyword"><span id="LST8A457180_14" data-languageSpecificText="vb=True|nu=true"></span></span>).</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="917d86fc-1cc2-aeba-ac62-5371ece12810.htm">NetworkTransform Class</a></div><div><a href="6cecd861-32c6-6b23-8a7a-03cfb6984eac.htm">HLNC Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Properties</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>