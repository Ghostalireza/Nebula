<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>NetworkNodeRegister Class</title><meta name="Title" content="NetworkNodeRegister" /><meta name="Help.Id" content="T:HLNC.NetworkNodeRegister" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="HLNC" /><meta name="guid" content="ab788281-7bda-0c0f-8a0f-5868622dd965" /><meta name="Description" content="summaryT:HLNC." /><meta name="tocFile" content="../toc/IDC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Network<wbr />Node<wbr />Register Class</h1><div class="summary"><p class="missing">[Missing &lt;summary&gt; documentation for "T:HLNC.NetworkNodeRegister"]</p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="6cecd861-32c6-6b23-8a7a-03cfb6984eac.htm">HLNC</a><br /><strong>Assembly:</strong> HLNC (in HLNC.dll) Version: 1.0.0+5f520b66ab07924d55bfb596fda2e99f5c6ce9f2<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">NetworkNodeRegister</span> : <span class="identifier">Resource</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">NetworkNodeRegister</span>
	<span class="keyword">Inherits</span> <span class="identifier">Resource</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">NetworkNodeRegister</span> : <span class="keyword">public</span> <span class="identifier">Resource</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs"><span class="keyword">type</span> <span class="identifier">NetworkNodeRegister</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">Resource</span>
    <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="noLink">GodotObject</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="noLink">RefCounted</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="noLink">Resource</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">NetworkNodeRegister</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="ID0OC0EASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="4c6bebed-3e1d-e600-c60e-c0e5a812b72f.htm">NetworkNodeRegister</a></td><td>Initializes a new instance of the <span class="selflink">NetworkNodeRegister</span> class</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="ID0TC0EASection"><table id="PropertyList" class="table is-hoverable"><tr><td><span class="noLink">NativeInstance</span></td><td>
            The pointer to the native instance of this <span class="noLink">GodotObject</span>.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">ResourceLocalToScene</span></td><td><p>If <span class="keyword"><span id="LSTCCA0C83A_0" data-languageSpecificText="vb=True|nu=true"></span></span>, the resource is duplicated for each instance of all scenes using it. At run-time, the resource can be modified in one scene without affecting other instances (see <span class="noLink">Instantiate(GenEditState)</span>).</p><p><b>Note:</b> Changing this property at run-time has no effect on already created duplicate resources.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">ResourceName</span></td><td><p>An optional name for this resource. When defined, its value is displayed to represent the resource in the Inspector dock. For built-in scripts, the name is displayed as part of the tab name in the script editor.</p><p><b>Note:</b> Some resource formats do not support resource names. You can still set the name in the editor or via code, but it will be lost when the resource is reloaded. For example, only built-in scripts can have a resource name, while scripts stored in separate files cannot.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">ResourcePath</span></td><td><p>The unique path to this resource. If it has been saved to disk, the value will be its filepath. If the resource is exclusively contained within a scene, the value will be the <span class="noLink">PackedScene</span>'s filepath, followed by a unique identifier.</p><p><b>Note:</b> Setting this property manually may fail if a resource with the same path has already been previously loaded. If necessary, use <span class="noLink">TakeOverPath(String)</span>.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">ResourceSceneUniqueId</span></td><td><p>An unique identifier relative to the this resource's scene. If left empty, the ID is automatically generated when this resource is saved inside a <span class="noLink">PackedScene</span>. If the resource is not inside a scene, this property is empty by default.</p><p><b>Note:</b> When the <span class="noLink">PackedScene</span> is saved, if multiple resources in the same scene use the same ID, only the earliest resource in the scene hierarchy keeps the original ID. The other resources are assigned new IDs from <span class="noLink">GenerateSceneUniqueId<span id="LSTCCA0C83A_1" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><b>Note:</b> Setting this property does not emit the <span class="noLink">Changed</span> signal.</p><p><b>Warning:</b> When setting, the ID must only consist of letters, numbers, and underscores. Otherwise, it will fail and default to a randomly generated ID.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDGEASection"><table id="MethodList" class="table is-hoverable"><tr><td><span class="noLink">_Get</span></td><td><p>Override this method to customize the behavior of <span class="noLink">Get(StringName)</span>. Should return the given <span class="parameter">property</span>'s value, or <span class="keyword"><span id="LSTCCA0C83A_2" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if the <span class="parameter">property</span> should be handled normally.</p><p>Combined with <span class="noLink">_Set(StringName, Variant)</span> and <span class="noLink">_GetPropertyList<span id="LSTCCA0C83A_3" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, this method allows defining custom properties, which is particularly useful for editor plugins. Note that a property must be present in <span class="noLink">GetPropertyList<span id="LSTCCA0C83A_4" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, otherwise this method will not be called.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override Variant _Get(StringName property)
{
    if (property == "FakeProperty")
    {
        GD.Print("Getting my property!");
        return 4;
    }
    return default;
}

public override Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt; _GetPropertyList()
{
    return new Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt;()
    {
        new Godot.Collections.Dictionary()
        {
            { "name", "FakeProperty" },
            { "type", (int)Variant.Type.Int }
        }
    };
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_GetPropertyList</span></td><td><p>Override this method to provide a custom list of additional properties to handle by the engine.</p><p>Should return a property list, as an <span class="noLink">Array</span> of dictionaries. The result is added to the array of <span class="noLink">GetPropertyList<span id="LSTCCA0C83A_5" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, and should be formatted in the same way. Each <span class="noLink">Dictionary</span> must at least contain the <span class="code">name</span> and <span class="code">type</span> entries.</p><p>You can use <span class="noLink">_PropertyCanRevert(StringName)</span> and <span class="noLink">_PropertyGetRevert(StringName)</span> to customize the default values of the properties added by this method.</p><p>The example below displays a list of numbers shown as words going from <span class="code">ZERO</span> to <span class="code">FIVE</span>, with <span class="code">number_count</span> controlling the size of the list:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[Tool]
public partial class MyNode : Node
{
    private int _numberCount;

    [Export]
    public int NumberCount
    {
        get =&gt; _numberCount;
        set
        {
            _numberCount = value;
            _numbers.Resize(_numberCount);
            NotifyPropertyListChanged();
        }
    }

    private List&lt;int&gt; _numbers = new();

    public override Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt; _GetPropertyList()
    {
        var properties = new Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt;();

        for (int i = 0; i &lt; _numberCount; i++)
        {
            properties.Add(new Godot.Collections.Dictionary()
            {
                { "name", $"number_{i}" },
                { "type", (int)Variant.Type.Int },
                { "hint", (int)PropertyHint.Enum },
                { "hint_string", "Zero,One,Two,Three,Four,Five" },
            });
        }

        return properties;
    }

    public override Variant _Get(StringName property)
    {
        string propertyName = property.ToString();
        if (propertyName.StartsWith("number_"))
        {
            int index = int.Parse(propertyName.Substring("number_".Length));
            return _numbers[index];
        }
        return default;
    }

    public override bool _Set(StringName property, Variant value)
    {
        string propertyName = property.ToString();
        if (propertyName.StartsWith("number_"))
        {
            int index = int.Parse(propertyName.Substring("number_".Length));
            numbers[index] = value.As&lt;int&gt;();
            return true;
        }
        return false;
    }
}</code></pre></div></div></p><p><b>Note:</b> This method is intended for advanced purposes. For most common use cases, the scripting languages offer easier ways to handle properties. See [annotation @GDScript.@export], [annotation @GDScript.@export_enum], [annotation @GDScript.@export_group], etc. If you want to customize exported properties, use <span class="noLink">_ValidateProperty(Dictionary)</span>.</p><p><b>Note:</b> If the object's script is not [annotation @GDScript.@tool], this method will not be called in the editor.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_GetRid</span></td><td><p>Override this method to return a custom <span class="noLink">Rid</span> when <span class="noLink">GetRid<span id="LSTCCA0C83A_6" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">_Notification</span></td><td><p>Called when the object receives a notification, which can be identified in <span class="parameter">what</span> by comparing it with a constant. See also <span class="noLink">Notification(Int32, Boolean)</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override void _Notification(int what)
{
    if (what == NotificationPredelete)
    {
        GD.Print("Goodbye!");
    }
}</code></pre></div></div></p><p><b>Note:</b> The base <span class="noLink">GodotObject</span> defines a few notifications (<span class="noLink">NotificationPostinitialize</span> and <span class="noLink">NotificationPredelete</span>). Inheriting classes such as <span class="noLink">Node</span> define a lot more notifications, which are also received by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_PropertyCanRevert</span></td><td><p>Override this method to customize the given <span class="parameter">property</span>'s revert behavior. Should return <span class="keyword"><span id="LSTCCA0C83A_7" data-languageSpecificText="vb=True|nu=true"></span></span> if the <span class="parameter">property</span> has a custom default value and is revertible in the Inspector dock. Use <span class="noLink">_PropertyGetRevert(StringName)</span> to specify the <span class="parameter">property</span>'s default value.</p><p><b>Note:</b> This method must return consistently, regardless of the current value of the <span class="parameter">property</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_PropertyGetRevert</span></td><td><p>Override this method to customize the given <span class="parameter">property</span>'s revert behavior. Should return the default value for the <span class="parameter">property</span>. If the default value differs from the <span class="parameter">property</span>'s current value, a revert icon is displayed in the Inspector dock.</p><p><b>Note:</b><span class="noLink">_PropertyCanRevert(StringName)</span> must also be overridden for this method to be called.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_Set</span></td><td><p>Override this method to customize the behavior of <span class="noLink">Set(StringName, Variant)</span>. Should set the <span class="parameter">property</span> to <span class="parameter">value</span> and return <span class="keyword"><span id="LSTCCA0C83A_8" data-languageSpecificText="vb=True|nu=true"></span></span>, or <span class="keyword"><span id="LSTCCA0C83A_9" data-languageSpecificText="vb=False|nu=false"></span></span> if the <span class="parameter">property</span> should be handled normally. The <i>exact</i> way to set the <span class="parameter">property</span> is up to this method's implementation.</p><p>Combined with <span class="noLink">_Get(StringName)</span> and <span class="noLink">_GetPropertyList<span id="LSTCCA0C83A_10" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, this method allows defining custom properties, which is particularly useful for editor plugins. Note that a property <i>must</i> be present in <span class="noLink">GetPropertyList<span id="LSTCCA0C83A_11" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, otherwise this method will not be called.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">private Godot.Collections.Dictionary _internalData = new Godot.Collections.Dictionary();

public override bool _Set(StringName property, Variant value)
{
    if (property == "FakeProperty")
    {
        // Storing the value in the fake property.
        _internalData["FakeProperty"] = value;
        return true;
    }

    return false;
}

public override Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt; _GetPropertyList()
{
    return new Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt;()
    {
        new Godot.Collections.Dictionary()
        {
            { "name", "FakeProperty" },
            { "type", (int)Variant.Type.Int }
        }
    };
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_SetupLocalToScene</span></td><td><p>Override this method to customize the newly duplicated resource created from <span class="noLink">Instantiate(GenEditState)</span>, if the original's <span class="noLink">ResourceLocalToScene</span> is set to <span class="keyword"><span id="LSTCCA0C83A_12" data-languageSpecificText="vb=True|nu=true"></span></span>.</p><p><b>Example:</b> Set a random <span class="code">damage</span> value to every local resource from an instantiated scene.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">extends Resource

var damage = 0

func _setup_local_to_scene():
    damage = randi_range(10, 40)</code></pre></div></div></p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">_ValidateProperty</span></td><td><p>Override this method to customize existing properties. Every property info goes through this method, except properties added with <span class="noLink">_GetPropertyList<span id="LSTCCA0C83A_13" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>. The dictionary contents is the same as in <span class="noLink">_GetPropertyList<span id="LSTCCA0C83A_14" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[Tool]
public partial class MyNode : Node
{
    private bool _isNumberEditable;

    [Export]
    public bool IsNumberEditable
    {
        get =&gt; _isNumberEditable;
        set
        {
            _isNumberEditable = value;
            NotifyPropertyListChanged();
        }
    }

    [Export]
    public int Number { get; set; }

    public override void _ValidateProperty(Godot.Collections.Dictionary property)
    {
        if (property["name"].AsStringName() == PropertyName.Number &amp;&amp; IsNumberEditable)
        {
            var usage = property["usage"].As&lt;PropertyUsageFlags&gt;() | PropertyUsageFlags.ReadOnly;
            property["usage"] = (int)usage;
        }
    }
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">AddUserSignal</span></td><td><p>Adds a user-defined <span class="parameter">signal</span>. Optional arguments for the signal can be added as an <span class="noLink">Array</span> of dictionaries, each defining a <span class="code">name</span><a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> and a <span class="code">type</span><a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a> (see <span class="noLink">Type</span>). See also <span class="noLink">HasUserSignal(StringName)</span> and <span class="noLink">RemoveUserSignal(StringName)</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">AddUserSignal("Hurt", new Godot.Collections.Array()
{
    new Godot.Collections.Dictionary()
    {
        { "name", "damage" },
        { "type", (int)Variant.Type.Int }
    },
    new Godot.Collections.Dictionary()
    {
        { "name", "source" },
        { "type", (int)Variant.Type.Object }
    }
});</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Call</span></td><td><p>Calls the <span class="parameter">method</span> on the object and returns the result. This method supports a variable number of arguments, so parameters can be passed as a comma separated list.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node3D();
node.Call(Node3D.MethodName.Rotate, new Vector3(1f, 0f, 0f), 1.571f);</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">CallDeferred</span></td><td><p>Calls the <span class="parameter">method</span> on the object during idle time. Always returns null, <b>not</b> the method's result.</p><p>Idle time happens mainly at the end of process and physics frames. In it, deferred calls will be run until there are none left, which means you can defer calls from other deferred calls and they'll still be run in the current idle time cycle. This means you should not call a method deferred from itself (or from a method called by it), as this causes infinite recursion the same way as if you had called the method directly.</p><p>This method supports a variable number of arguments, so parameters can be passed as a comma separated list.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node3D();
node.CallDeferred(Node3D.MethodName.Rotate, new Vector3(1f, 0f, 0f), 1.571f);</code></pre></div></div></p><p>See also <span class="code">Callable.call_deferred</span>.</p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><p><b>Note:</b> If you're looking to delay the function call by a frame, refer to the <span class="noLink">ProcessFrame</span> and <span class="noLink">PhysicsFrame</span> signals.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = Node3D.new()
# Make a Callable and bind the arguments to the node's rotate() call.
var callable = node.rotate.bind(Vector3(1.0, 0.0, 0.0), 1.571)
# Connect the callable to the process_frame signal, so it gets called in the next process frame.
# CONNECT_ONE_SHOT makes sure it only gets called once instead of every frame.
get_tree().process_frame.connect(callable, CONNECT_ONE_SHOT)</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Callv</span></td><td><p>Calls the <span class="parameter">method</span> on the object and returns the result. Unlike <span class="noLink">Call(StringName, <span id="LSTCCA0C83A_15" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTCCA0C83A_16" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, this method expects all parameters to be contained inside <span class="parameter">argArray</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node3D();
node.Callv(Node3D.MethodName.Rotate, new Godot.Collections.Array { new Vector3(1f, 0f, 0f), 1.571f });</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">CancelFree</span></td><td><p>If this method is called during <span class="noLink">NotificationPredelete</span>, this object will reject being freed and will remain allocated. This is mostly an internal function used for error handling to avoid the user from freeing objects when they are not intended to.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">CanTranslateMessages</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_17" data-languageSpecificText="vb=True|nu=true"></span></span> if the object is allowed to translate messages with <span class="noLink">Tr(StringName, StringName)</span> and <span class="noLink">TrN(StringName, StringName, Int32, StringName)</span>. See also <span class="noLink">SetMessageTranslation(Boolean)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Connect</span></td><td><p>Connects a <span class="parameter">signal</span> by name to a <span class="parameter">callable</span>. Optional <span class="parameter">flags</span> can be also added to configure the connection's behavior (see <span class="noLink">ConnectFlags</span> constants).</p><p>A signal can only be connected once to the same <span class="noLink">Callable</span>. If the signal is already connected, this method returns <span class="noLink">InvalidParameter</span> and pushes an error message, unless the signal is connected with <span class="noLink">ReferenceCounted</span>. To prevent this, use <span class="noLink">IsConnected(StringName, Callable)</span> first to check for existing connections.</p><p>If the <span class="parameter">callable</span>'s object is freed, the connection will be lost.</p><p><b>Examples with recommended syntax:</b></p><p>Connecting signals is one of the most common operations in Godot and the API gives many options to do so, which are described further down. The code block below shows the recommended approach.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override void _Ready()
{
    var button = new Button();
    // C# supports passing signals as events, so we can use this idiomatic construct:
    button.ButtonDown += OnButtonDown;

    // This assumes that a `Player` class exists, which defines a `Hit` signal.
    var player = new Player();
    // We can use lambdas when we need to bind additional parameters.
    player.Hit += () =&gt; OnPlayerHit("sword", 100);
}

private void OnButtonDown()
{
    GD.Print("Button down!");
}

private void OnPlayerHit(string weaponType, int damage)
{
    GD.Print($"Hit with weapon {weaponType} for {damage} damage.");
}</code></pre></div></div></p><p><b><span class="code">Object.connect()</span> or <span class="code">Signal.connect()</span>?</b></p><p>As seen above, the recommended method to connect signals is not <span class="noLink">Connect(StringName, Callable, UInt32)</span>. The code block below shows the four options for connecting signals, using either this legacy method or the recommended <span class="code">Signal.connect</span>, and using either an implicit <span class="noLink">Callable</span> or a manually defined one.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override void _Ready()
{
    var button = new Button();
    // Option 1: In C#, we can use signals as events and connect with this idiomatic syntax:
    button.ButtonDown += OnButtonDown;
    // Option 2: GodotObject.Connect() with a constructed Callable from a method group.
    button.Connect(Button.SignalName.ButtonDown, Callable.From(OnButtonDown));
    // Option 3: GodotObject.Connect() with a constructed Callable using a target object and method name.
    button.Connect(Button.SignalName.ButtonDown, new Callable(this, MethodName.OnButtonDown));
}

private void OnButtonDown()
{
    GD.Print("Button down!");
}</code></pre></div></div></p><p>While all options have the same outcome (<span class="code">button</span>'s <span class="noLink">ButtonDown</span> signal will be connected to <span class="code">_on_button_down</span>), <b>option 3</b> offers the best validation: it will print a compile-time error if either the <span class="code">button_down</span><span class="noLink">Signal</span> or the <span class="code">_on_button_down</span><span class="noLink">Callable</span> are not defined. On the other hand, <b>option 2</b> only relies on string names and will only be able to validate either names at runtime: it will print a runtime error if <span class="code">"button_down"</span> doesn't correspond to a signal, or if <span class="code">"_on_button_down"</span> is not a registered method in the object <span class="code">self</span>. The main reason for using options 1, 2, or 4 would be if you actually need to use strings (e.g. to connect signals programmatically based on strings read from a configuration file). Otherwise, option 3 is the recommended (and fastest) method.</p><p><b>Binding and passing parameters:</b></p><p>The syntax to bind parameters is through <span class="code">Callable.bind</span>, which returns a copy of the <span class="noLink">Callable</span> with its parameters bound.</p><p>When calling <span class="noLink">EmitSignal(StringName, <span id="LSTCCA0C83A_18" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTCCA0C83A_19" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> or <span class="code">Signal.emit</span>, the signal parameters can be also passed. The examples below show the relationship between these signal parameters and bound parameters.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override void _Ready()
{
    // This assumes that a `Player` class exists, which defines a `Hit` signal.
    var player = new Player();
    // Using lambda expressions that create a closure that captures the additional parameters.
    // The lambda only receives the parameters defined by the signal's delegate.
    player.Hit += (hitBy, level) =&gt; OnPlayerHit(hitBy, level, "sword", 100);

    // Parameters added when emitting the signal are passed first.
    player.EmitSignal(SignalName.Hit, "Dark lord", 5);
}

// We pass two arguments when emitting (`hit_by`, `level`),
// and bind two more arguments when connecting (`weapon_type`, `damage`).
private void OnPlayerHit(string hitBy, int level, string weaponType, int damage)
{
    GD.Print($"Hit by {hitBy} (level {level}) with weapon {weaponType} for {damage} damage.");
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Disconnect</span></td><td><p>Disconnects a <span class="parameter">signal</span> by name from a given <span class="parameter">callable</span>. If the connection does not exist, generates an error. Use <span class="noLink">IsConnected(StringName, Callable)</span> to make sure that the connection exists.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Dispose<span id="LSTCCA0C83A_20" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span></td><td>
            Disposes of this <span class="noLink">GodotObject</span>.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Dispose(Boolean)</span></td><td>
            Disposes implementation of this <span class="noLink">GodotObject</span>.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Duplicate</span></td><td><p>Duplicates this resource, returning a new resource with its <span class="code">export</span>ed or <span class="noLink">Storage</span> properties copied from the original.</p><p>If <span class="parameter">subresources</span> is <span class="keyword"><span id="LSTCCA0C83A_21" data-languageSpecificText="vb=False|nu=false"></span></span>, a shallow copy is returned; nested resources within subresources are not duplicated and are shared from the original resource. If <span class="parameter">subresources</span> is <span class="keyword"><span id="LSTCCA0C83A_22" data-languageSpecificText="vb=True|nu=true"></span></span>, a deep copy is returned; nested subresources will be duplicated and are not shared.</p><p>Subresource properties with the <span class="noLink">AlwaysDuplicate</span> flag are always duplicated even with <span class="parameter">subresources</span> set to <span class="keyword"><span id="LSTCCA0C83A_23" data-languageSpecificText="vb=False|nu=false"></span></span>, and properties with the <span class="noLink">NeverDuplicate</span> flag are never duplicated even with <span class="parameter">subresources</span> set to <span class="keyword"><span id="LSTCCA0C83A_24" data-languageSpecificText="vb=True|nu=true"></span></span>.</p><p><b>Note:</b> For custom resources, this method will fail if <span class="noLink">#ctor<span id="LSTCCA0C83A_25" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> has been defined with required parameters.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">EmitChanged</span></td><td><p>Emits the <span class="noLink">Changed</span> signal. This method is called automatically for some built-in resources.</p><p><b>Note:</b> For custom resources, it's recommended to call this method whenever a meaningful change occurs, such as a modified property. This ensures that custom <span class="noLink">GodotObject</span>s depending on the resource are properly updated.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var damage:
    set(new_value):
        if damage != new_value:
            damage = new_value
            emit_changed()</code></pre></div></div></p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">EmitSignal</span></td><td><p>Emits the given <span class="parameter">signal</span> by name. The signal must exist, so it should be a built-in signal of this class or one of its inherited classes, or a user-defined signal (see <span class="noLink">AddUserSignal(String, Array)</span>). This method supports a variable number of arguments, so parameters can be passed as a comma separated list.</p><p>Returns <span class="noLink">Unavailable</span> if <span class="parameter">signal</span> does not exist or the parameters are invalid.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">EmitSignal(SignalName.Hit, "sword", 100);
EmitSignal(SignalName.GameOver);</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">signal</span> must be in snake_case when referring to built-in Godot signals. Prefer using the names exposed in the <span class="code">SignalName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><span class="noLink">Finalize</span></td><td><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Free</span></td><td><p>Deletes the object from memory. Pre-existing references to the object become invalid, and any attempt to access them will result in a run-time error. Checking the references with <span class="code">@GlobalScope.is_instance_valid</span> will return <span class="keyword"><span id="LSTCCA0C83A_26" data-languageSpecificText="vb=False|nu=false"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Get</span></td><td><p>Returns the <span class="noLink">Variant</span> value of the given <span class="parameter">property</span>. If the <span class="parameter">property</span> does not exist, this method returns <span class="keyword"><span id="LSTCCA0C83A_27" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.Rotation = 1.5f;
var a = node.Get(Node2D.PropertyName.Rotation); // a is 1.5</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">property</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetClass</span></td><td><p>Returns the object's built-in class name, as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>. See also <span class="noLink">IsClass(String)</span>.</p><p><b>Note:</b> This method ignores <span class="code">class_name</span> declarations. If this object's script has defined a <span class="code">class_name</span>, the base, built-in class name is returned instead.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><span class="noLink">GetIncomingConnections</span></td><td><p>Returns an <span class="noLink">Array</span> of signal connections received by this object. Each connection is represented as a <span class="noLink">Dictionary</span> that contains three entries:</p><p>- <span class="code">signal</span> is a reference to the <span class="noLink">Signal</span>;</p><p>- <span class="code">callable</span> is a reference to the <span class="noLink">Callable</span>;</p><p>- <span class="code">flags</span> is a combination of <span class="noLink">ConnectFlags</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetIndexed</span></td><td><p>Gets the object's property indexed by the given <span class="parameter">propertyPath</span>. The path should be a <span class="noLink">NodePath</span> relative to the current object and can use the colon character (<span class="code">:</span>) to access nested properties.</p><p><b>Examples:</b><span class="code">"position:x"</span> or <span class="code">"material:next_pass:blend_mode"</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.Position = new Vector2(5, -10);
var a = node.GetIndexed("position");   // a is Vector2(5, -10)
var b = node.GetIndexed("position:y"); // b is -10</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">propertyPath</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><p><b>Note:</b> This method does not support actual paths to nodes in the <span class="noLink">SceneTree</span>, only sub-property paths. In the context of nodes, use <span class="noLink">GetNodeAndResource(NodePath)</span> instead.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetInstanceId</span></td><td><p>Returns the object's unique instance ID. This ID can be saved in <span class="noLink">EncodedObjectAsId</span>, and can be used to retrieve this object instance with <span class="code">@GlobalScope.instance_from_id</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetLocalScene</span></td><td><p>If <span class="noLink">ResourceLocalToScene</span> is set to <span class="keyword"><span id="LSTCCA0C83A_28" data-languageSpecificText="vb=True|nu=true"></span></span> and the resource has been loaded from a <span class="noLink">PackedScene</span> instantiation, returns the root <span class="noLink">Node</span> of the scene where this resource is used. Otherwise, returns <span class="keyword"><span id="LSTCCA0C83A_29" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">GetMeta</span></td><td><p>Returns the object's metadata value for the given entry <span class="parameter">name</span>. If the entry does not exist, returns <span class="parameter">default</span>. If <span class="parameter">default</span> is <span class="keyword"><span id="LSTCCA0C83A_30" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>, an error is also generated.</p><p><b>Note:</b> A metadata's name must be a valid identifier as per <span class="code">StringName.is_valid_identifier</span> method.</p><p><b>Note:</b> Metadata that has a name starting with an underscore (<span class="code">_</span>) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetMetaList</span></td><td><p>Returns the object's metadata entry names as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>[].</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetMethodArgumentCount</span></td><td><p>Returns the number of arguments of the given <span class="parameter">method</span> by name.</p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetMethodList</span></td><td><p>Returns this object's methods and their signatures as an <span class="noLink">Array</span> of dictionaries. Each <span class="noLink">Dictionary</span> contains the following entries:</p><p>- <span class="code">name</span> is the name of the method, as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>;</p><p>- <span class="code">args</span> is an <span class="noLink">Array</span> of dictionaries representing the arguments;</p><p>- <span class="code">default_args</span> is the default arguments as an <span class="noLink">Array</span> of variants;</p><p>- <span class="code">flags</span> is a combination of <span class="noLink">MethodFlags</span>;</p><p>- <span class="code">id</span> is the method's internal identifier <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a>;</p><p>- <span class="code">return</span> is the returned value, as a <span class="noLink">Dictionary</span>;</p><p><b>Note:</b> The dictionaries of <span class="code">args</span> and <span class="code">return</span> are formatted identically to the results of <span class="noLink">GetPropertyList<span id="LSTCCA0C83A_31" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, although not all entries are used.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetPropertyList</span></td><td><p>Returns the object's property list as an <span class="noLink">Array</span> of dictionaries. Each <span class="noLink">Dictionary</span> contains the following entries:</p><p>- <span class="code">name</span> is the property's name, as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>;</p><p>- <span class="code">class_name</span> is an empty <span class="noLink">StringName</span>, unless the property is <span class="noLink">Object</span> and it inherits from a class;</p><p>- <span class="code">type</span> is the property's type, as an <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a> (see <span class="noLink">Type</span>);</p><p>- <span class="code">hint</span> is <i>how</i> the property is meant to be edited (see <span class="noLink">PropertyHint</span>);</p><p>- <span class="code">hint_string</span> depends on the hint (see <span class="noLink">PropertyHint</span>);</p><p>- <span class="code">usage</span> is a combination of <span class="noLink">PropertyUsageFlags</span>.</p><p><b>Note:</b> In GDScript, all class members are treated as properties. In C# and GDExtension, it may be necessary to explicitly mark class members as Godot properties using decorators or attributes.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetReferenceCount</span></td><td><p>Returns the current reference count.</p><br />(Inherited from <span class="noLink">RefCounted</span>)</td></tr><tr><td><span class="noLink">GetRid</span></td><td><p>Returns the <span class="noLink">Rid</span> of this resource (or an empty RID). Many resources (such as <span class="noLink">Texture2D</span>, <span class="noLink">Mesh</span>, and so on) are high-level abstractions of resources stored in a specialized server (<span class="noLink">DisplayServer</span>, <span class="noLink">RenderingServer</span>, etc.), so this function will return the original <span class="noLink">Rid</span>.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">GetScript</span></td><td><p>Returns the object's <span class="noLink">Script</span> instance, or <span class="keyword"><span id="LSTCCA0C83A_32" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if no script is attached.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetSignalConnectionList</span></td><td><p>Returns an <span class="noLink">Array</span> of connections for the given <span class="parameter">signal</span> name. Each connection is represented as a <span class="noLink">Dictionary</span> that contains three entries:</p><p>- <span class="code">signal</span> is a reference to the <span class="noLink">Signal</span>;</p><p>- <span class="code">callable</span> is a reference to the connected <span class="noLink">Callable</span>;</p><p>- <span class="code">flags</span> is a combination of <span class="noLink">ConnectFlags</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetSignalList</span></td><td><p>Returns the list of existing signals as an <span class="noLink">Array</span> of dictionaries.</p><p><b>Note:</b> Due of the implementation, each <span class="noLink">Dictionary</span> is formatted very similarly to the returned values of <span class="noLink">GetMethodList<span id="LSTCCA0C83A_33" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><span class="noLink">HasGodotClassMethod</span></td><td>
            Check if the type contains a method with the given name.
            This method is used by Godot to check if a method exists before invoking it.
            Do not call or override this method.
            <br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">HasGodotClassSignal</span></td><td>
            Check if the type contains a signal with the given name.
            This method is used by Godot to check if a signal exists before raising it.
            Do not call or override this method.
            <br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">HasMeta</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_34" data-languageSpecificText="vb=True|nu=true"></span></span> if a metadata entry is found with the given <span class="parameter">name</span>. See also <span class="noLink">GetMeta(StringName, Variant)</span>, <span class="noLink">SetMeta(StringName, Variant)</span> and <span class="noLink">RemoveMeta(StringName)</span>.</p><p><b>Note:</b> A metadata's name must be a valid identifier as per <span class="code">StringName.is_valid_identifier</span> method.</p><p><b>Note:</b> Metadata that has a name starting with an underscore (<span class="code">_</span>) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">HasMethod</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_35" data-languageSpecificText="vb=True|nu=true"></span></span> if the given <span class="parameter">method</span> name exists in the object.</p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">HasSignal</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_36" data-languageSpecificText="vb=True|nu=true"></span></span> if the given <span class="parameter">signal</span> name exists in the object.</p><p><b>Note:</b> In C#, <span class="parameter">signal</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">SignalName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">HasUserSignal</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_37" data-languageSpecificText="vb=True|nu=true"></span></span> if the given user-defined <span class="parameter">signal</span> name exists. Only signals added with <span class="noLink">AddUserSignal(String, Array)</span> are included. See also <span class="noLink">RemoveUserSignal(StringName)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">InitRef</span></td><td><p>Initializes the internal reference counter. Use this only if you really know what you are doing.</p><p>Returns whether the initialization was successful.</p><br />(Inherited from <span class="noLink">RefCounted</span>)</td></tr><tr><td><span class="noLink">InvokeGodotClassMethod</span></td><td>
            Invokes the method with the given name, using the given arguments.
            This method is used by Godot to invoke methods from the engine side.
            Do not call or override this method.
            <br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">IsBlockingSignals</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_38" data-languageSpecificText="vb=True|nu=true"></span></span> if the object is blocking its signals from being emitted. See <span class="noLink">SetBlockSignals(Boolean)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">IsClass</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_39" data-languageSpecificText="vb=True|nu=true"></span></span> if the object inherits from the given <span class="parameter">class</span>. See also <span class="noLink">GetClass<span id="LSTCCA0C83A_40" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var sprite2D = new Sprite2D();
sprite2D.IsClass("Sprite2D"); // Returns true
sprite2D.IsClass("Node");     // Returns true
sprite2D.IsClass("Node3D");   // Returns false</code></pre></div></div></p><p><b>Note:</b> This method ignores <span class="code">class_name</span> declarations in the object's script.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">IsConnected</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_41" data-languageSpecificText="vb=True|nu=true"></span></span> if a connection exists between the given <span class="parameter">signal</span> name and <span class="parameter">callable</span>.</p><p><b>Note:</b> In C#, <span class="parameter">signal</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">SignalName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">IsQueuedForDeletion</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_42" data-languageSpecificText="vb=True|nu=true"></span></span> if the <span class="noLink">QueueFree<span id="LSTCCA0C83A_43" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> method was called for the object.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td>Creates a shallow copy of the current <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><span class="noLink">Notification</span></td><td><p>Sends the given <span class="parameter">what</span> notification to all classes inherited by the object, triggering calls to <span class="noLink">_Notification(Int32)</span>, starting from the highest ancestor (the <span class="noLink">GodotObject</span> class) and going down to the object's script.</p><p>If <span class="parameter">reversed</span> is <span class="keyword"><span id="LSTCCA0C83A_44" data-languageSpecificText="vb=True|nu=true"></span></span>, the call order is reversed.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var player = new Node2D();
player.SetScript(GD.Load("res://player.gd"));

player.Notification(NotificationEnterTree);
// The call order is GodotObject -&gt; Node -&gt; Node2D -&gt; player.gd.

player.Notification(NotificationEnterTree, true);
// The call order is player.gd -&gt; Node2D -&gt; Node -&gt; GodotObject.</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">NotifyPropertyListChanged</span></td><td><p>Emits the <span class="noLink">PropertyListChanged</span> signal. This is mainly used to refresh the editor, so that the Inspector and editor plugins are properly updated.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">PropertyCanRevert</span></td><td><p>Returns <span class="keyword"><span id="LSTCCA0C83A_45" data-languageSpecificText="vb=True|nu=true"></span></span> if the given <span class="parameter">property</span> has a custom default value. Use <span class="noLink">PropertyGetRevert(StringName)</span> to get the <span class="parameter">property</span>'s default value.</p><p><b>Note:</b> This method is used by the Inspector dock to display a revert icon. The object must implement <span class="noLink">_PropertyCanRevert(StringName)</span> to customize the default value. If <span class="noLink">_PropertyCanRevert(StringName)</span> is not implemented, this method returns <span class="keyword"><span id="LSTCCA0C83A_46" data-languageSpecificText="vb=False|nu=false"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">PropertyGetRevert</span></td><td><p>Returns the custom default value of the given <span class="parameter">property</span>. Use <span class="noLink">PropertyCanRevert(StringName)</span> to check if the <span class="parameter">property</span> has a custom default value.</p><p><b>Note:</b> This method is used by the Inspector dock to display a revert icon. The object must implement <span class="noLink">_PropertyGetRevert(StringName)</span> to customize the default value. If <span class="noLink">_PropertyGetRevert(StringName)</span> is not implemented, this method returns <span class="keyword"><span id="LSTCCA0C83A_47" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Reference</span></td><td><p>Increments the internal reference counter. Use this only if you really know what you are doing.</p><p>Returns <span class="keyword"><span id="LSTCCA0C83A_48" data-languageSpecificText="vb=True|nu=true"></span></span> if the increment was successful, <span class="keyword"><span id="LSTCCA0C83A_49" data-languageSpecificText="vb=False|nu=false"></span></span> otherwise.</p><br />(Inherited from <span class="noLink">RefCounted</span>)</td></tr><tr><td><span class="noLink">RemoveMeta</span></td><td><p>Removes the given entry <span class="parameter">name</span> from the object's metadata. See also <span class="noLink">HasMeta(StringName)</span>, <span class="noLink">GetMeta(StringName, Variant)</span> and <span class="noLink">SetMeta(StringName, Variant)</span>.</p><p><b>Note:</b> A metadata's name must be a valid identifier as per <span class="code">StringName.is_valid_identifier</span> method.</p><p><b>Note:</b> Metadata that has a name starting with an underscore (<span class="code">_</span>) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">RemoveUserSignal</span></td><td><p>Removes the given user signal <span class="parameter">signal</span> from the object. See also <span class="noLink">AddUserSignal(String, Array)</span> and <span class="noLink">HasUserSignal(StringName)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Set</span></td><td><p>Assigns <span class="parameter">value</span> to the given <span class="parameter">property</span>. If the property does not exist or the given <span class="parameter">value</span>'s type doesn't match, nothing happens.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.Set(Node2D.PropertyName.GlobalScale, new Vector2(8, 2.5));
GD.Print(node.GlobalScale); // Prints Vector2(8, 2.5)</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">property</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetBlockSignals</span></td><td><p>If set to <span class="keyword"><span id="LSTCCA0C83A_50" data-languageSpecificText="vb=True|nu=true"></span></span>, the object becomes unable to emit signals. As such, <span class="noLink">EmitSignal(StringName, <span id="LSTCCA0C83A_51" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTCCA0C83A_52" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> and signal connections will not work, until it is set to <span class="keyword"><span id="LSTCCA0C83A_53" data-languageSpecificText="vb=False|nu=false"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetDeferred</span></td><td><p>Assigns <span class="parameter">value</span> to the given <span class="parameter">property</span>, at the end of the current frame. This is equivalent to calling <span class="noLink">Set(StringName, Variant)</span> through <span class="noLink">CallDeferred(StringName, <span id="LSTCCA0C83A_54" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTCCA0C83A_55" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.Rotation = 1.5f;
node.SetDeferred(Node2D.PropertyName.Rotation, 3f);
GD.Print(node.Rotation); // Prints 1.5

await ToSignal(GetTree(), SceneTree.SignalName.ProcessFrame);
GD.Print(node.Rotation); // Prints 3.0</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">property</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetIndexed</span></td><td><p>Assigns a new <span class="parameter">value</span> to the property identified by the <span class="parameter">propertyPath</span>. The path should be a <span class="noLink">NodePath</span> relative to this object, and can use the colon character (<span class="code">:</span>) to access nested properties.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.SetIndexed("position", new Vector2(42, 0));
node.SetIndexed("position:y", -10);
GD.Print(node.Position); // Prints (42, -10)</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">propertyPath</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetMessageTranslation</span></td><td><p>If set to <span class="keyword"><span id="LSTCCA0C83A_56" data-languageSpecificText="vb=True|nu=true"></span></span>, allows the object to translate messages with <span class="noLink">Tr(StringName, StringName)</span> and <span class="noLink">TrN(StringName, StringName, Int32, StringName)</span>. Enabled by default. See also <span class="noLink">CanTranslateMessages<span id="LSTCCA0C83A_57" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetMeta</span></td><td><p>Adds or changes the entry <span class="parameter">name</span> inside the object's metadata. The metadata <span class="parameter">value</span> can be any <span class="noLink">Variant</span>, although some types cannot be serialized correctly.</p><p>If <span class="parameter">value</span> is <span class="keyword"><span id="LSTCCA0C83A_58" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>, the entry is removed. This is the equivalent of using <span class="noLink">RemoveMeta(StringName)</span>. See also <span class="noLink">HasMeta(StringName)</span> and <span class="noLink">GetMeta(StringName, Variant)</span>.</p><p><b>Note:</b> A metadata's name must be a valid identifier as per <span class="code">StringName.is_valid_identifier</span> method.</p><p><b>Note:</b> Metadata that has a name starting with an underscore (<span class="code">_</span>) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetScript</span></td><td><p>Attaches <span class="parameter">script</span> to the object, and instantiates it. As a result, the script's <span class="noLink">#ctor<span id="LSTCCA0C83A_59" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called. A <span class="noLink">Script</span> is used to extend the object's functionality.</p><p>If a script already exists, its instance is detached, and its property values and state are lost. Built-in property values are still kept.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetupLocalToScene</span></td><td><p>Calls <span class="noLink">_SetupLocalToScene<span id="LSTCCA0C83A_60" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>. If <span class="noLink">ResourceLocalToScene</span> is set to <span class="keyword"><span id="LSTCCA0C83A_61" data-languageSpecificText="vb=True|nu=true"></span></span>, this method is automatically called from <span class="noLink">Instantiate(GenEditState)</span> by the newly duplicated resource within the scene instance.</p><br />(Inherited from <span class="noLink">Resource</span>)<br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><span class="noLink">TakeOverPath</span></td><td><p>Sets the <span class="noLink">ResourcePath</span> to <span class="parameter">path</span>, potentially overriding an existing cache entry for this path. Further attempts to load an overridden resource by path will instead return this resource.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">ToSignal</span></td><td>
            Returns a new <span class="noLink">SignalAwaiter</span> awaiter configured to complete when the instance
            <span class="parameter">source</span> emits the signal specified by the <span class="parameter">signal</span> parameter.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">ToString</span></td><td>
            Converts this <span class="noLink">GodotObject</span> to a string.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Tr</span></td><td><p>Translates a <span class="parameter">message</span>, using the translation catalogs configured in the Project Settings. Further <span class="parameter">context</span> can be specified to help with the translation. Note that most <span class="noLink">Control</span> nodes automatically translate their strings, so this method is mostly useful for formatted strings or custom drawn text.</p><p>If <span class="noLink">CanTranslateMessages<span id="LSTCCA0C83A_62" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is <span class="keyword"><span id="LSTCCA0C83A_63" data-languageSpecificText="vb=False|nu=false"></span></span>, or no translation is available, this method returns the <span class="parameter">message</span> without changes. See <span class="noLink">SetMessageTranslation(Boolean)</span>.</p><p>For detailed examples, see <a href="$DOCS_URL/tutorials/i18n/internationalizing_games.html">Internationalizing games</a>.</p><p><b>Note:</b> This method can't be used without an <span class="noLink">GodotObject</span> instance, as it requires the <span class="noLink">CanTranslateMessages<span id="LSTCCA0C83A_64" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> method. To translate strings in a static context, use <span class="noLink">Translate(StringName, StringName)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">TrN</span></td><td><p>Translates a <span class="parameter">message</span> or <span class="parameter">pluralMessage</span>, using the translation catalogs configured in the Project Settings. Further <span class="parameter">context</span> can be specified to help with the translation.</p><p>If <span class="noLink">CanTranslateMessages<span id="LSTCCA0C83A_65" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is <span class="keyword"><span id="LSTCCA0C83A_66" data-languageSpecificText="vb=False|nu=false"></span></span>, or no translation is available, this method returns <span class="parameter">message</span> or <span class="parameter">pluralMessage</span>, without changes. See <span class="noLink">SetMessageTranslation(Boolean)</span>.</p><p>The <span class="parameter">n</span> is the number, or amount, of the message's subject. It is used by the translation system to fetch the correct plural form for the current language.</p><p>For detailed examples, see <a href="$DOCS_URL/tutorials/i18n/localization_using_gettext.html">Localization using gettext</a>.</p><p><b>Note:</b> Negative and <a href="https://learn.microsoft.com/dotnet/api/system.single" target="_blank" rel="noopener noreferrer">Single</a> numbers may not properly apply to some countable subjects. It's recommended to handle these cases with <span class="noLink">Tr(StringName, StringName)</span>.</p><p><b>Note:</b> This method can't be used without an <span class="noLink">GodotObject</span> instance, as it requires the <span class="noLink">CanTranslateMessages<span id="LSTCCA0C83A_67" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> method. To translate strings in a static context, use <span class="noLink">TranslatePlural(StringName, StringName, Int32, StringName)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Unreference</span></td><td><p>Decrements the internal reference counter. Use this only if you really know what you are doing.</p><p>Returns <span class="keyword"><span id="LSTCCA0C83A_68" data-languageSpecificText="vb=True|nu=true"></span></span> if the object should be freed after the decrement, <span class="keyword"><span id="LSTCCA0C83A_69" data-languageSpecificText="vb=False|nu=false"></span></span> otherwise.</p><br />(Inherited from <span class="noLink">RefCounted</span>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Events</h2><div id="IDAEASection"><table id="EventList" class="table is-hoverable"><tr><td><span class="noLink">Changed</span></td><td><p>Emitted when the resource changes, usually when one of its properties is modified. See also <span class="noLink">EmitChanged<span id="LSTCCA0C83A_70" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><b>Note:</b> This signal is not emitted automatically for properties of custom resources. If necessary, a setter needs to be created to emit the signal.</p><br />(Inherited from <span class="noLink">Resource</span>)</td></tr><tr><td><span class="noLink">PropertyListChanged</span></td><td><p>Emitted when <span class="noLink">NotifyPropertyListChanged<span id="LSTCCA0C83A_71" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">ScriptChanged</span></td><td><p>Emitted when the object's script is changed.</p><p><b>Note:</b> When this signal is emitted, the new script is not initialized yet. If you need to access the new script, defer connections to this signal with <span class="noLink">Deferred</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetupLocalToSceneRequested</span></td><td><p>Emitted by a newly duplicated resource with <span class="noLink">ResourceLocalToScene</span> set to <span class="keyword"><span id="LSTCCA0C83A_72" data-languageSpecificText="vb=True|nu=true"></span></span>.</p><br />(Inherited from <span class="noLink">Resource</span>)<br /><span class="tag is-danger">Obsolete.</span></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDEEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="a6b41c05-b97f-2740-6061-c66ba99c7197.htm">network_class_name</a></td><td> </td></tr><tr><td><a href="f7d5d2ab-30cd-c09b-abd2-4bfeafdf1e92.htm">network_scene</a></td><td> </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="6cecd861-32c6-6b23-8a7a-03cfb6984eac.htm">HLNC Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Events</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>