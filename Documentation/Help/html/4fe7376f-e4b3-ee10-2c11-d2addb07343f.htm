<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>NetworkAnimationPlayer Class</title><meta name="Title" content="NetworkAnimationPlayer" /><meta name="Help.Id" content="T:HLNC.NetworkAnimationPlayer" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="HLNC" /><meta name="guid" content="4fe7376f-e4b3-ee10-2c11-d2addb07343f" /><meta name="Description" content="summaryT:HLNC." /><meta name="tocFile" content="../toc/IDC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Network<wbr />Animation<wbr />Player Class</h1><div class="summary"><p class="missing">[Missing &lt;summary&gt; documentation for "T:HLNC.NetworkAnimationPlayer"]</p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="6cecd861-32c6-6b23-8a7a-03cfb6984eac.htm">HLNC</a><br /><strong>Assembly:</strong> HLNC (in HLNC.dll) Version: 1.0.0+7574cdd813309c396b4a81a4f145ba702dc43f29<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">NetworkAnimationPlayer</span> : <span class="identifier">NetworkNode3D</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">NetworkAnimationPlayer</span>
	<span class="keyword">Inherits</span> <span class="identifier">NetworkNode3D</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">NetworkAnimationPlayer</span> : <span class="keyword">public</span> <span class="identifier">NetworkNode3D</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs"><span class="keyword">type</span> <span class="identifier">NetworkAnimationPlayer</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">NetworkNode3D</span>
    <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="noLink">GodotObject</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="noLink">Node</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="noLink">Node3D</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">NetworkAnimationPlayer</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="ID0RG0EASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="cb9b39b9-7d8a-079b-dee8-2e1413ebf858.htm">NetworkAnimationPlayer</a></td><td>Initializes a new instance of the <span class="selflink">NetworkAnimationPlayer</span> class</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="ID0AH0EASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="4e6d746a-65fa-baf8-29f7-919efe733ea0.htm">active_animation</a></td><td> </td></tr><tr><td><a href="b7d54d89-bc1a-28f3-e864-a836f89d2f70.htm">animation_position</a></td><td> </td></tr><tr><td><span class="noLink">AutoTranslateMode</span></td><td><p>Defines if any text should automatically change to its translated version depending on the current locale (for nodes such as <span class="noLink">Label</span>, <span class="noLink">RichTextLabel</span>, <span class="noLink">Window</span>, etc.). Also decides if the node's strings should be parsed for POT generation.</p><p><b>Note:</b> For the root node, auto translate mode can also be set via <span class="code">ProjectSettings.internationalization/rendering/root_node_auto_translate</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Basis</span></td><td><p>Basis of the <span class="noLink">Transform</span> property. Represents the rotation, scale, and shear of this node.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">EditorDescription</span></td><td><p>An optional description to the node. It will be displayed as a tooltip when hovering over the node in the editor's Scene dock.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GlobalBasis</span></td><td><p>Global basis of this node. This is equivalent to <span class="code">global_transform.basis</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalPosition</span></td><td><p>Global position of this node. This is equivalent to <span class="code">global_transform.origin</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalRotation</span></td><td><p>Rotation part of the global transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).</p><p><b>Note:</b> In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a <span class="noLink">Vector3</span> data structure not because the rotation is a vector, but only because <span class="noLink">Vector3</span> exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalRotationDegrees</span></td><td><p>Helper property to access <span class="noLink">GlobalRotation</span> in degrees instead of radians.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalTransform</span></td><td><p>World3D space (global) <span class="noLink">Transform3D</span> of this node.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><a href="97cc285f-e42e-65bf-e0d6-a0726948f74e.htm">InputAuthority</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><a href="16aaef9d-688f-f644-ced0-95290ad57ad9.htm">IsCurrentOwner</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">Multiplayer</span></td><td><p>The <span class="noLink">MultiplayerApi</span> instance associated with this node. See <span class="noLink">GetMultiplayer(NodePath)</span>.</p><p><b>Note:</b> Renaming the node, or moving it in the tree, will not move the <span class="noLink">MultiplayerApi</span> to the new path, you will have to update this manually.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Name</span></td><td><p>The name of the node. This name must be unique among the siblings (other child nodes from the same parent). When set to an existing sibling's name, the node is automatically renamed.</p><p><b>Note:</b> When changing the name, the following characters will be replaced with an underscore: (<span class="code">.</span><span class="code">:</span><span class="code">@</span><span class="code">/</span><span class="code">"</span><span class="code">%</span>). In particular, the <span class="code">@</span> character is reserved for auto-generated names. See also <span class="code">String.validate_node_name</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">NativeInstance</span></td><td>
            The pointer to the native instance of this <span class="noLink">GodotObject</span>.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="ef7779e9-49da-c92f-0098-677917f3c19e.htm">NetworkId</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">Owner</span></td><td><p>The owner of this node. The owner must be an ancestor of this node. When packing the owner node in a <span class="noLink">PackedScene</span>, all the nodes it owns are also saved with it.</p><p><b>Note:</b> In the editor, nodes not owned by the scene root are usually not displayed in the Scene dock, and will <b>not</b> be saved. To prevent this, remember to set the owner after calling <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>. See also (see <span class="noLink">UniqueNameInOwner</span>)</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">PhysicsInterpolationMode</span></td><td><p>Allows enabling or disabling physics interpolation per node, offering a finer grain of control than turning physics interpolation on and off globally. See <span class="code">ProjectSettings.physics/common/physics_interpolation</span> and <span class="noLink">PhysicsInterpolation</span> for the global setting.</p><p><b>Note:</b> When teleporting a node to a distant position you should temporarily disable interpolation with <span class="noLink">ResetPhysicsInterpolation<span id="LSTA7B2252C_0" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Position</span></td><td><p>Local position or translation of this node relative to the parent. This is equivalent to <span class="code">transform.origin</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">ProcessMode</span></td><td><p>The node's processing behavior (see <span class="noLink">ProcessModeEnum</span>). To check if the node can process in its current mode, use <span class="noLink">CanProcess<span id="LSTA7B2252C_1" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessPhysicsPriority</span></td><td><p>Similar to <span class="noLink">ProcessPriority</span> but for <span class="noLink">NotificationPhysicsProcess</span>, <span class="noLink">_PhysicsProcess(Double)</span> or the internal version.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessPriority</span></td><td><p>The node's execution order of the process callbacks (<span class="noLink">_Process(Double)</span>, <span class="noLink">_PhysicsProcess(Double)</span>, and internal processing). Nodes whose priority value is <i>lower</i> call their process callbacks first, regardless of tree order.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessThreadGroup</span></td><td><p>Set the process thread group for this node (basically, whether it receives <span class="noLink">NotificationProcess</span>, <span class="noLink">NotificationPhysicsProcess</span>, <span class="noLink">_Process(Double)</span> or <span class="noLink">_PhysicsProcess(Double)</span> (and the internal versions) on the main thread or in a sub-thread.</p><p>By default, the thread group is <span class="noLink">Inherit</span>, which means that this node belongs to the same thread group as the parent node. The thread groups means that nodes in a specific thread group will process together, separate to other thread groups (depending on <span class="noLink">ProcessThreadGroupOrder</span>). If the value is set is <span class="noLink">SubThread</span>, this thread group will occur on a sub thread (not the main thread), otherwise if set to <span class="noLink">MainThread</span> it will process on the main thread. If there is not a parent or grandparent node set to something other than inherit, the node will belong to the <i>default thread group</i>. This default group will process on the main thread and its group order is 0.</p><p>During processing in a sub-thread, accessing most functions in nodes outside the thread group is forbidden (and it will result in an error in debug mode). Use <span class="noLink">CallDeferred(StringName, <span id="LSTA7B2252C_2" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_3" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, <span class="noLink">CallThreadSafe(StringName, <span id="LSTA7B2252C_4" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_5" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, <span class="noLink">CallDeferredThreadGroup(StringName, <span id="LSTA7B2252C_6" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_7" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> and the likes in order to communicate from the thread groups to the main thread (or to other thread groups).</p><p>To better understand process thread groups, the idea is that any node set to any other value than <span class="noLink">Inherit</span> will include any child (and grandchild) nodes set to inherit into its process thread group. This means that the processing of all the nodes in the group will happen together, at the same time as the node including them.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessThreadGroupOrder</span></td><td><p>Change the process thread group order. Groups with a lesser order will process before groups with a greater order. This is useful when a large amount of nodes process in sub thread and, afterwards, another group wants to collect their result in the main thread, as an example.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ProcessThreadMessages</span></td><td><p>Set whether the current thread group will process messages (calls to <span class="noLink">CallDeferredThreadGroup(StringName, <span id="LSTA7B2252C_8" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_9" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> on threads), and whether it wants to receive them during regular process or physics process callbacks.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Quaternion</span></td><td><p>Access to the node rotation as a <span class="noLink">Quaternion</span>. This property is ideal for tweening complex rotations.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Rotation</span></td><td><p>Rotation part of the local transformation in radians, specified in terms of Euler angles. The angles construct a rotation in the order specified by the <span class="noLink">RotationOrder</span> property.</p><p><b>Note:</b> In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a <span class="noLink">Vector3</span> data structure not because the rotation is a vector, but only because <span class="noLink">Vector3</span> exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.</p><p><b>Note:</b> This property is edited in the inspector in degrees. If you want to use degrees in a script, use <span class="noLink">RotationDegrees</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotationDegrees</span></td><td><p>Helper property to access <span class="noLink">Rotation</span> in degrees instead of radians.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotationEditMode</span></td><td><p>Specify how rotation (and scale) will be presented in the editor.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotationOrder</span></td><td><p>Specify the axis rotation order of the <span class="noLink">Rotation</span> property. The final orientation is constructed by rotating the Euler angles in the order specified by this property.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Scale</span></td><td><p>Scale part of the local transformation.</p><p><b>Note:</b> Mixed negative scales in 3D are not decomposable from the transformation matrix. Due to the way scale is represented with transformation matrices in Godot, the scale values will either be all positive or all negative.</p><p><b>Note:</b> Not all nodes are visually scaled by the <span class="noLink">Scale</span> property. For example, <span class="noLink">Light3D</span>s are not visually affected by <span class="noLink">Scale</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">SceneFilePath</span></td><td><p>The original scene's file path, if the node has been instantiated from a <span class="noLink">PackedScene</span> file. Only scene root nodes contains this.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="5ab0a1ed-6114-3897-d4e9-2b35bd8db1f1.htm">Serializers</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">TopLevel</span></td><td><p>If <span class="keyword"><span id="LSTA7B2252C_10" data-languageSpecificText="vb=True|nu=true"></span></span>, the node will not inherit its transformations from its parent. Node transformations are only in global space.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Transform</span></td><td><p>Local space <span class="noLink">Transform3D</span> of this node, with respect to the parent node.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">UniqueNameInOwner</span></td><td><p>If <span class="keyword"><span id="LSTA7B2252C_11" data-languageSpecificText="vb=True|nu=true"></span></span>, the node can be accessed from any node sharing the same <span class="noLink">Owner</span> or from the <span class="noLink">Owner</span> itself, with special <span class="code">%Name</span> syntax in <span class="noLink">GetNode(NodePath)</span>.</p><p><b>Note:</b> If another node with the same <span class="noLink">Owner</span> shares the same <span class="noLink">Name</span> as this node, the other node will no longer be accessible as unique.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">VisibilityParent</span></td><td><p>Defines the visibility range parent for this node and its subtree. The visibility parent must be a GeometryInstance3D. Any visual instance will only be visible if the visibility parent (and all of its visibility ancestors) is hidden by being closer to the camera than its own <span class="noLink">VisibilityRangeBegin</span>. Nodes hidden via the <span class="noLink">Visible</span> property are essentially removed from the visibility dependency tree, so dependent instances will not take the hidden node or its ancestors into account.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Visible</span></td><td><p>If <span class="keyword"><span id="LSTA7B2252C_12" data-languageSpecificText="vb=True|nu=true"></span></span>, this node is drawn. The node is only visible if all of its ancestors are visible as well (in other words, <span class="noLink">IsVisibleInTree<span id="LSTA7B2252C_13" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> must return <span class="keyword"><span id="LSTA7B2252C_14" data-languageSpecificText="vb=True|nu=true"></span></span>).</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDREASection"><table id="MethodList" class="table is-hoverable"><tr><td><span class="noLink">_EnterTree</span></td><td><p>Called when the node enters the <span class="noLink">SceneTree</span> (e.g. upon instantiating, scene changing, or after calling <span class="noLink">AddChild(Node, Boolean, InternalMode)</span> in a script). If the node has children, its <span class="noLink">_EnterTree<span id="LSTA7B2252C_15" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> callback will be called first, and then that of the children.</p><p>Corresponds to the <span class="noLink">NotificationEnterTree</span> notification in <span class="noLink">_Notification(Int32)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">_ExitTree</span></td><td><p>Called when the node is about to leave the <span class="noLink">SceneTree</span> (e.g. upon freeing, scene changing, or after calling <span class="noLink">RemoveChild(Node)</span> in a script). If the node has children, its <span class="noLink">_ExitTree<span id="LSTA7B2252C_16" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> callback will be called last, after all its children have left the tree.</p><p>Corresponds to the <span class="noLink">NotificationExitTree</span> notification in <span class="noLink">_Notification(Int32)</span> and signal <span class="noLink">TreeExiting</span>. To get notified when the node has already left the active tree, connect to the <span class="noLink">TreeExited</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">_Get</span></td><td><p>Override this method to customize the behavior of <span class="noLink">Get(StringName)</span>. Should return the given <span class="parameter">property</span>'s value, or <span class="keyword"><span id="LSTA7B2252C_17" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if the <span class="parameter">property</span> should be handled normally.</p><p>Combined with <span class="noLink">_Set(StringName, Variant)</span> and <span class="noLink">_GetPropertyList<span id="LSTA7B2252C_18" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, this method allows defining custom properties, which is particularly useful for editor plugins. Note that a property must be present in <span class="noLink">GetPropertyList<span id="LSTA7B2252C_19" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, otherwise this method will not be called.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override Variant _Get(StringName property)
{
    if (property == "FakeProperty")
    {
        GD.Print("Getting my property!");
        return 4;
    }
    return default;
}

public override Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt; _GetPropertyList()
{
    return new Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt;()
    {
        new Godot.Collections.Dictionary()
        {
            { "name", "FakeProperty" },
            { "type", (int)Variant.Type.Int }
        }
    };
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_GetConfigurationWarnings</span></td><td><p>The elements in the array returned from this method are displayed as warnings in the Scene dock if the script that overrides it is a <span class="code">tool</span> script.</p><p>Returning an empty array produces no warnings.</p><p>Call <span class="noLink">UpdateConfigurationWarnings<span id="LSTA7B2252C_20" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> when the warnings need to be updated for this node.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">@export var energy = 0:
    set(value):
        energy = value
        update_configuration_warnings()

func _get_configuration_warnings():
    if energy &lt; 0:
        return ["Energy must be 0 or greater."]
    else:
        return []</code></pre></div></div></p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">_GetPropertyList</span></td><td><p>Override this method to provide a custom list of additional properties to handle by the engine.</p><p>Should return a property list, as an <span class="noLink">Array</span> of dictionaries. The result is added to the array of <span class="noLink">GetPropertyList<span id="LSTA7B2252C_21" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, and should be formatted in the same way. Each <span class="noLink">Dictionary</span> must at least contain the <span class="code">name</span> and <span class="code">type</span> entries.</p><p>You can use <span class="noLink">_PropertyCanRevert(StringName)</span> and <span class="noLink">_PropertyGetRevert(StringName)</span> to customize the default values of the properties added by this method.</p><p>The example below displays a list of numbers shown as words going from <span class="code">ZERO</span> to <span class="code">FIVE</span>, with <span class="code">number_count</span> controlling the size of the list:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[Tool]
public partial class MyNode : Node
{
    private int _numberCount;

    [Export]
    public int NumberCount
    {
        get =&gt; _numberCount;
        set
        {
            _numberCount = value;
            _numbers.Resize(_numberCount);
            NotifyPropertyListChanged();
        }
    }

    private List&lt;int&gt; _numbers = new();

    public override Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt; _GetPropertyList()
    {
        var properties = new Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt;();

        for (int i = 0; i &lt; _numberCount; i++)
        {
            properties.Add(new Godot.Collections.Dictionary()
            {
                { "name", $"number_{i}" },
                { "type", (int)Variant.Type.Int },
                { "hint", (int)PropertyHint.Enum },
                { "hint_string", "Zero,One,Two,Three,Four,Five" },
            });
        }

        return properties;
    }

    public override Variant _Get(StringName property)
    {
        string propertyName = property.ToString();
        if (propertyName.StartsWith("number_"))
        {
            int index = int.Parse(propertyName.Substring("number_".Length));
            return _numbers[index];
        }
        return default;
    }

    public override bool _Set(StringName property, Variant value)
    {
        string propertyName = property.ToString();
        if (propertyName.StartsWith("number_"))
        {
            int index = int.Parse(propertyName.Substring("number_".Length));
            numbers[index] = value.As&lt;int&gt;();
            return true;
        }
        return false;
    }
}</code></pre></div></div></p><p><b>Note:</b> This method is intended for advanced purposes. For most common use cases, the scripting languages offer easier ways to handle properties. See [annotation @GDScript.@export], [annotation @GDScript.@export_enum], [annotation @GDScript.@export_group], etc. If you want to customize exported properties, use <span class="noLink">_ValidateProperty(Dictionary)</span>.</p><p><b>Note:</b> If the object's script is not [annotation @GDScript.@tool], this method will not be called in the editor.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_Input</span></td><td><p>Called when there is an input event. The input event propagates up through the node tree until a node consumes it.</p><p>It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <span class="noLink">SetProcessInput(Boolean)</span>.</p><p>To consume the input event and stop it propagating further to other nodes, <span class="noLink">SetInputAsHandled<span id="LSTA7B2252C_22" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> can be called.</p><p>For gameplay input, <span class="noLink">_UnhandledInput(InputEvent)</span> and <span class="noLink">_UnhandledKeyInput(InputEvent)</span> are usually a better fit as they allow the GUI to intercept the events first.</p><p><b>Note:</b> This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="2380568a-b8a1-0ffe-1c24-81bc92bce30a.htm">_NetworkProcess</a></td><td><br />(Overrides <a href="bad088a7-8638-10c9-2d69-63f97577c1ec.htm">NetworkNode3D<span id="LSTA7B2252C_23" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>_NetworkProcess(Int32)</a>)</td></tr><tr><td><span class="noLink">_Notification</span></td><td><p>Called when the object receives a notification, which can be identified in <span class="parameter">what</span> by comparing it with a constant. See also <span class="noLink">Notification(Int32, Boolean)</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override void _Notification(int what)
{
    if (what == NotificationPredelete)
    {
        GD.Print("Goodbye!");
    }
}</code></pre></div></div></p><p><b>Note:</b> The base <span class="noLink">GodotObject</span> defines a few notifications (<span class="noLink">NotificationPostinitialize</span> and <span class="noLink">NotificationPredelete</span>). Inheriting classes such as <span class="noLink">Node</span> define a lot more notifications, which are also received by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="6d997ae2-2571-1929-669f-fe0431eeebf8.htm">_PhysicsProcess</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">_Process</span></td><td><p>Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the <span class="parameter">delta</span> time since the previous frame is not constant. <span class="parameter">delta</span> is in seconds.</p><p>It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with <span class="noLink">SetProcess(Boolean)</span>.</p><p>Corresponds to the <span class="noLink">NotificationProcess</span> notification in <span class="noLink">_Notification(Int32)</span>.</p><p><b>Note:</b> This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">_PropertyCanRevert</span></td><td><p>Override this method to customize the given <span class="parameter">property</span>'s revert behavior. Should return <span class="keyword"><span id="LSTA7B2252C_24" data-languageSpecificText="vb=True|nu=true"></span></span> if the <span class="parameter">property</span> has a custom default value and is revertible in the Inspector dock. Use <span class="noLink">_PropertyGetRevert(StringName)</span> to specify the <span class="parameter">property</span>'s default value.</p><p><b>Note:</b> This method must return consistently, regardless of the current value of the <span class="parameter">property</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_PropertyGetRevert</span></td><td><p>Override this method to customize the given <span class="parameter">property</span>'s revert behavior. Should return the default value for the <span class="parameter">property</span>. If the default value differs from the <span class="parameter">property</span>'s current value, a revert icon is displayed in the Inspector dock.</p><p><b>Note:</b><span class="noLink">_PropertyCanRevert(StringName)</span> must also be overridden for this method to be called.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="de60c232-c228-0db3-2b7b-b0d9679e4646.htm">_Ready</a></td><td><br />(Overrides <a href="91939368-4a2f-099d-32f7-3a27b1211294.htm">NetworkNode3D<span id="LSTA7B2252C_25" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>_Ready<span id="LSTA7B2252C_26" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><span class="noLink">_Set</span></td><td><p>Override this method to customize the behavior of <span class="noLink">Set(StringName, Variant)</span>. Should set the <span class="parameter">property</span> to <span class="parameter">value</span> and return <span class="keyword"><span id="LSTA7B2252C_27" data-languageSpecificText="vb=True|nu=true"></span></span>, or <span class="keyword"><span id="LSTA7B2252C_28" data-languageSpecificText="vb=False|nu=false"></span></span> if the <span class="parameter">property</span> should be handled normally. The <i>exact</i> way to set the <span class="parameter">property</span> is up to this method's implementation.</p><p>Combined with <span class="noLink">_Get(StringName)</span> and <span class="noLink">_GetPropertyList<span id="LSTA7B2252C_29" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, this method allows defining custom properties, which is particularly useful for editor plugins. Note that a property <i>must</i> be present in <span class="noLink">GetPropertyList<span id="LSTA7B2252C_30" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, otherwise this method will not be called.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">private Godot.Collections.Dictionary _internalData = new Godot.Collections.Dictionary();

public override bool _Set(StringName property, Variant value)
{
    if (property == "FakeProperty")
    {
        // Storing the value in the fake property.
        _internalData["FakeProperty"] = value;
        return true;
    }

    return false;
}

public override Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt; _GetPropertyList()
{
    return new Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt;()
    {
        new Godot.Collections.Dictionary()
        {
            { "name", "FakeProperty" },
            { "type", (int)Variant.Type.Int }
        }
    };
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">_ShortcutInput</span></td><td><p>Called when an <span class="noLink">InputEventKey</span>, <span class="noLink">InputEventShortcut</span>, or <span class="noLink">InputEventJoypadButton</span> hasn't been consumed by <span class="noLink">_Input(InputEvent)</span> or any GUI <span class="noLink">Control</span> item. It is called before <span class="noLink">_UnhandledKeyInput(InputEvent)</span> and <span class="noLink">_UnhandledInput(InputEvent)</span>. The input event propagates up through the node tree until a node consumes it.</p><p>It is only called if shortcut processing is enabled, which is done automatically if this method is overridden, and can be toggled with <span class="noLink">SetProcessShortcutInput(Boolean)</span>.</p><p>To consume the input event and stop it propagating further to other nodes, <span class="noLink">SetInputAsHandled<span id="LSTA7B2252C_31" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> can be called.</p><p>This method can be used to handle shortcuts. For generic GUI events, use <span class="noLink">_Input(InputEvent)</span> instead. Gameplay events should usually be handled with either <span class="noLink">_UnhandledInput(InputEvent)</span> or <span class="noLink">_UnhandledKeyInput(InputEvent)</span>.</p><p><b>Note:</b> This method is only called if the node is present in the scene tree (i.e. if it's not orphan).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">_UnhandledInput</span></td><td><p>Called when an <span class="noLink">InputEvent</span> hasn't been consumed by <span class="noLink">_Input(InputEvent)</span> or any GUI <span class="noLink">Control</span> item. It is called after <span class="noLink">_ShortcutInput(InputEvent)</span> and after <span class="noLink">_UnhandledKeyInput(InputEvent)</span>. The input event propagates up through the node tree until a node consumes it.</p><p>It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <span class="noLink">SetProcessUnhandledInput(Boolean)</span>.</p><p>To consume the input event and stop it propagating further to other nodes, <span class="noLink">SetInputAsHandled<span id="LSTA7B2252C_32" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> can be called.</p><p>For gameplay input, this method is usually a better fit than <span class="noLink">_Input(InputEvent)</span>, as GUI events need a higher priority. For keyboard shortcuts, consider using <span class="noLink">_ShortcutInput(InputEvent)</span> instead, as it is called before this method. Finally, to handle keyboard events, consider using <span class="noLink">_UnhandledKeyInput(InputEvent)</span> for performance reasons.</p><p><b>Note:</b> This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">_UnhandledKeyInput</span></td><td><p>Called when an <span class="noLink">InputEventKey</span> hasn't been consumed by <span class="noLink">_Input(InputEvent)</span> or any GUI <span class="noLink">Control</span> item. It is called after <span class="noLink">_ShortcutInput(InputEvent)</span> but before <span class="noLink">_UnhandledInput(InputEvent)</span>. The input event propagates up through the node tree until a node consumes it.</p><p>It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <span class="noLink">SetProcessUnhandledKeyInput(Boolean)</span>.</p><p>To consume the input event and stop it propagating further to other nodes, <span class="noLink">SetInputAsHandled<span id="LSTA7B2252C_33" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> can be called.</p><p>This method can be used to handle Unicode character input with Alt, Alt + Ctrl, and Alt + Shift modifiers, after shortcuts were handled.</p><p>For gameplay input, this and <span class="noLink">_UnhandledInput(InputEvent)</span> are usually a better fit than <span class="noLink">_Input(InputEvent)</span>, as GUI events should be handled first. This method also performs better than <span class="noLink">_UnhandledInput(InputEvent)</span>, since unrelated events such as <span class="noLink">InputEventMouseMotion</span> are automatically filtered. For shortcuts, consider using <span class="noLink">_ShortcutInput(InputEvent)</span> instead.</p><p><b>Note:</b> This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">_ValidateProperty</span></td><td><p>Override this method to customize existing properties. Every property info goes through this method, except properties added with <span class="noLink">_GetPropertyList<span id="LSTA7B2252C_34" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>. The dictionary contents is the same as in <span class="noLink">_GetPropertyList<span id="LSTA7B2252C_35" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[Tool]
public partial class MyNode : Node
{
    private bool _isNumberEditable;

    [Export]
    public bool IsNumberEditable
    {
        get =&gt; _isNumberEditable;
        set
        {
            _isNumberEditable = value;
            NotifyPropertyListChanged();
        }
    }

    [Export]
    public int Number { get; set; }

    public override void _ValidateProperty(Godot.Collections.Dictionary property)
    {
        if (property["name"].AsStringName() == PropertyName.Number &amp;&amp; IsNumberEditable)
        {
            var usage = property["usage"].As&lt;PropertyUsageFlags&gt;() | PropertyUsageFlags.ReadOnly;
            property["usage"] = (int)usage;
        }
    }
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">AddChild</span></td><td><p>Adds a child <span class="parameter">node</span>. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.</p><p>If <span class="parameter">forceReadableName</span> is <span class="keyword"><span id="LSTA7B2252C_36" data-languageSpecificText="vb=True|nu=true"></span></span>, improves the readability of the added <span class="parameter">node</span>. If not named, the <span class="parameter">node</span> is renamed to its type, and if it shares <span class="noLink">Name</span> with a sibling, a number is suffixed more appropriately. This operation is very slow. As such, it is recommended leaving this to <span class="keyword"><span id="LSTA7B2252C_37" data-languageSpecificText="vb=False|nu=false"></span></span>, which assigns a dummy name featuring <span class="code">@</span> in both situations.</p><p>If <span class="parameter">internal</span> is different than <span class="noLink">Disabled</span>, the child will be added as internal node. These nodes are ignored by methods like <span class="noLink">GetChildren(Boolean)</span>, unless their parameter <span class="code">include_internal</span> is <span class="keyword"><span id="LSTA7B2252C_38" data-languageSpecificText="vb=True|nu=true"></span></span>. The intended usage is to hide the internal nodes from the user, so the user won't accidentally delete or modify them. Used by some GUI nodes, e.g. <span class="noLink">ColorPicker</span>. See <span class="noLink">InternalMode</span> for available modes.</p><p><b>Note:</b> If <span class="parameter">node</span> already has a parent, this method will fail. Use <span class="noLink">RemoveChild(Node)</span> first to remove <span class="parameter">node</span> from its current parent. For example:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Node childNode = GetChild(0);
if (childNode.GetParent() != null)
{
    childNode.GetParent().RemoveChild(childNode);
}
AddChild(childNode);</code></pre></div></div></p><p>If you need the child node to be added below a specific node in the list of children, use <span class="noLink">AddSibling(Node, Boolean)</span> instead of this method.</p><p><b>Note:</b> If you want a child to be persisted to a <span class="noLink">PackedScene</span>, you must set <span class="noLink">Owner</span> in addition to calling <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>. This is typically relevant for <a href="$DOCS_URL/tutorials/plugins/running_code_in_the_editor.html">tool scripts</a> and <a href="$DOCS_URL/tutorials/plugins/editor/index.html">editor plugins</a>. If <span class="noLink">AddChild(Node, Boolean, InternalMode)</span> is called without setting <span class="noLink">Owner</span>, the newly added <span class="noLink">Node</span> will not be visible in the scene tree, though it will be visible in the 2D/3D view.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">AddGizmo</span></td><td><p>Attach an editor gizmo to this <span class="noLink">Node3D</span>.</p><p><b>Note:</b> The gizmo object would typically be an instance of <span class="code">EditorNode3DGizmo</span>, but the argument type is kept generic to avoid creating a dependency on editor classes in <span class="noLink">Node3D</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">AddSibling</span></td><td><p>Adds a <span class="parameter">sibling</span> node to this node's parent, and moves the added sibling right below this node.</p><p>If <span class="parameter">forceReadableName</span> is <span class="keyword"><span id="LSTA7B2252C_39" data-languageSpecificText="vb=True|nu=true"></span></span>, improves the readability of the added <span class="parameter">sibling</span>. If not named, the <span class="parameter">sibling</span> is renamed to its type, and if it shares <span class="noLink">Name</span> with a sibling, a number is suffixed more appropriately. This operation is very slow. As such, it is recommended leaving this to <span class="keyword"><span id="LSTA7B2252C_40" data-languageSpecificText="vb=False|nu=false"></span></span>, which assigns a dummy name featuring <span class="code">@</span> in both situations.</p><p>Use <span class="noLink">AddChild(Node, Boolean, InternalMode)</span> instead of this method if you don't need the child node to be added below a specific node in the list of children.</p><p><b>Note:</b> If this node is internal, the added sibling will be internal too (see <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>'s <span class="code">internal</span> parameter).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">AddToGroup</span></td><td><p>Adds the node to the <span class="parameter">group</span>. Groups can be helpful to organize a subset of nodes, for example <span class="code">"enemies"</span> or <span class="code">"collectables"</span>. See notes in the description, and the group methods in <span class="noLink">SceneTree</span>.</p><p>If <span class="parameter">persistent</span> is <span class="keyword"><span id="LSTA7B2252C_41" data-languageSpecificText="vb=True|nu=true"></span></span>, the group will be stored when saved inside a <span class="noLink">PackedScene</span>. All groups created and displayed in the Node dock are persistent.</p><p><b>Note:</b> To improve performance, the order of group names is <i>not</i> guaranteed and may vary between project runs. Therefore, do not rely on the group order.</p><p><b>Note:</b><span class="noLink">SceneTree</span>'s group methods will <i>not</i> work on this node if not inside the tree (see <span class="noLink">IsInsideTree<span id="LSTA7B2252C_42" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">AddUserSignal</span></td><td><p>Adds a user-defined <span class="parameter">signal</span>. Optional arguments for the signal can be added as an <span class="noLink">Array</span> of dictionaries, each defining a <span class="code">name</span><a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> and a <span class="code">type</span><a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a> (see <span class="noLink">Type</span>). See also <span class="noLink">HasUserSignal(StringName)</span> and <span class="noLink">RemoveUserSignal(StringName)</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">AddUserSignal("Hurt", new Godot.Collections.Array()
{
    new Godot.Collections.Dictionary()
    {
        { "name", "damage" },
        { "type", (int)Variant.Type.Int }
    },
    new Godot.Collections.Dictionary()
    {
        { "name", "source" },
        { "type", (int)Variant.Type.Object }
    }
});</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Atr</span></td><td><p>Translates a <span class="parameter">message</span>, using the translation catalogs configured in the Project Settings. Further <span class="parameter">context</span> can be specified to help with the translation. Note that most <span class="noLink">Control</span> nodes automatically translate their strings, so this method is mostly useful for formatted strings or custom drawn text.</p><p>This method works the same as <span class="noLink">Tr(StringName, StringName)</span>, with the addition of respecting the <span class="noLink">AutoTranslateMode</span> state.</p><p>If <span class="noLink">CanTranslateMessages<span id="LSTA7B2252C_43" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is <span class="keyword"><span id="LSTA7B2252C_44" data-languageSpecificText="vb=False|nu=false"></span></span>, or no translation is available, this method returns the <span class="parameter">message</span> without changes. See <span class="noLink">SetMessageTranslation(Boolean)</span>.</p><p>For detailed examples, see <a href="$DOCS_URL/tutorials/i18n/internationalizing_games.html">Internationalizing games</a>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">AtrN</span></td><td><p>Translates a <span class="parameter">message</span> or <span class="parameter">pluralMessage</span>, using the translation catalogs configured in the Project Settings. Further <span class="parameter">context</span> can be specified to help with the translation.</p><p>This method works the same as <span class="noLink">TrN(StringName, StringName, Int32, StringName)</span>, with the addition of respecting the <span class="noLink">AutoTranslateMode</span> state.</p><p>If <span class="noLink">CanTranslateMessages<span id="LSTA7B2252C_45" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is <span class="keyword"><span id="LSTA7B2252C_46" data-languageSpecificText="vb=False|nu=false"></span></span>, or no translation is available, this method returns <span class="parameter">message</span> or <span class="parameter">pluralMessage</span>, without changes. See <span class="noLink">SetMessageTranslation(Boolean)</span>.</p><p>The <span class="parameter">n</span> is the number, or amount, of the message's subject. It is used by the translation system to fetch the correct plural form for the current language.</p><p>For detailed examples, see <a href="$DOCS_URL/tutorials/i18n/localization_using_gettext.html">Localization using gettext</a>.</p><p><b>Note:</b> Negative and <a href="https://learn.microsoft.com/dotnet/api/system.single" target="_blank" rel="noopener noreferrer">Single</a> numbers may not properly apply to some countable subjects. It's recommended to handle these cases with <span class="noLink">Atr(String, StringName)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Call</span></td><td><p>Calls the <span class="parameter">method</span> on the object and returns the result. This method supports a variable number of arguments, so parameters can be passed as a comma separated list.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node3D();
node.Call(Node3D.MethodName.Rotate, new Vector3(1f, 0f, 0f), 1.571f);</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">CallDeferred</span></td><td><p>Calls the <span class="parameter">method</span> on the object during idle time. Always returns null, <b>not</b> the method's result.</p><p>Idle time happens mainly at the end of process and physics frames. In it, deferred calls will be run until there are none left, which means you can defer calls from other deferred calls and they'll still be run in the current idle time cycle. This means you should not call a method deferred from itself (or from a method called by it), as this causes infinite recursion the same way as if you had called the method directly.</p><p>This method supports a variable number of arguments, so parameters can be passed as a comma separated list.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node3D();
node.CallDeferred(Node3D.MethodName.Rotate, new Vector3(1f, 0f, 0f), 1.571f);</code></pre></div></div></p><p>See also <span class="code">Callable.call_deferred</span>.</p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><p><b>Note:</b> If you're looking to delay the function call by a frame, refer to the <span class="noLink">ProcessFrame</span> and <span class="noLink">PhysicsFrame</span> signals.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = Node3D.new()
# Make a Callable and bind the arguments to the node's rotate() call.
var callable = node.rotate.bind(Vector3(1.0, 0.0, 0.0), 1.571)
# Connect the callable to the process_frame signal, so it gets called in the next process frame.
# CONNECT_ONE_SHOT makes sure it only gets called once instead of every frame.
get_tree().process_frame.connect(callable, CONNECT_ONE_SHOT)</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">CallDeferredThreadGroup</span></td><td><p>This function is similar to <span class="noLink">CallDeferred(StringName, <span id="LSTA7B2252C_47" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_48" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> except that the call will take place when the node thread group is processed. If the node thread group processes in sub-threads, then the call will be done on that thread, right before <span class="noLink">NotificationProcess</span> or <span class="noLink">NotificationPhysicsProcess</span>, the <span class="noLink">_Process(Double)</span> or <span class="noLink">_PhysicsProcess(Double)</span> or their internal versions are called.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">CallThreadSafe</span></td><td><p>This function ensures that the calling of this function will succeed, no matter whether it's being done from a thread or not. If called from a thread that is not allowed to call the function, the call will become deferred. Otherwise, the call will go through directly.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Callv</span></td><td><p>Calls the <span class="parameter">method</span> on the object and returns the result. Unlike <span class="noLink">Call(StringName, <span id="LSTA7B2252C_49" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_50" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, this method expects all parameters to be contained inside <span class="parameter">argArray</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node3D();
node.Callv(Node3D.MethodName.Rotate, new Godot.Collections.Array { new Vector3(1f, 0f, 0f), 1.571f });</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">CancelFree</span></td><td><p>If this method is called during <span class="noLink">NotificationPredelete</span>, this object will reject being freed and will remain allocated. This is mostly an internal function used for error handling to avoid the user from freeing objects when they are not intended to.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">CanProcess</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_51" data-languageSpecificText="vb=True|nu=true"></span></span> if the node can receive processing notifications and input callbacks (<span class="noLink">NotificationProcess</span>, <span class="noLink">_Input(InputEvent)</span>, etc.) from the <span class="noLink">SceneTree</span> and <span class="noLink">Viewport</span>. The returned value depends on <span class="noLink">ProcessMode</span>:</p><p>- If set to <span class="noLink">Pausable</span>, returns <span class="keyword"><span id="LSTA7B2252C_52" data-languageSpecificText="vb=True|nu=true"></span></span> when the game is processing, i.e. <span class="noLink">Paused</span> is <span class="keyword"><span id="LSTA7B2252C_53" data-languageSpecificText="vb=False|nu=false"></span></span>;</p><p>- If set to <span class="noLink">WhenPaused</span>, returns <span class="keyword"><span id="LSTA7B2252C_54" data-languageSpecificText="vb=True|nu=true"></span></span> when the game is paused, i.e. <span class="noLink">Paused</span> is <span class="keyword"><span id="LSTA7B2252C_55" data-languageSpecificText="vb=True|nu=true"></span></span>;</p><p>- If set to <span class="noLink">Always</span>, always returns <span class="keyword"><span id="LSTA7B2252C_56" data-languageSpecificText="vb=True|nu=true"></span></span>;</p><p>- If set to <span class="noLink">Disabled</span>, always returns <span class="keyword"><span id="LSTA7B2252C_57" data-languageSpecificText="vb=False|nu=false"></span></span>;</p><p>- If set to <span class="noLink">Inherit</span>, use the parent node's <span class="noLink">ProcessMode</span> to determine the result.</p><p>If the node is not inside the tree, returns <span class="keyword"><span id="LSTA7B2252C_58" data-languageSpecificText="vb=False|nu=false"></span></span> no matter the value of <span class="noLink">ProcessMode</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">CanTranslateMessages</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_59" data-languageSpecificText="vb=True|nu=true"></span></span> if the object is allowed to translate messages with <span class="noLink">Tr(StringName, StringName)</span> and <span class="noLink">TrN(StringName, StringName, Int32, StringName)</span>. See also <span class="noLink">SetMessageTranslation(Boolean)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">ClearGizmos</span></td><td><p>Clear all gizmos attached to this <span class="noLink">Node3D</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">ClearSubgizmoSelection</span></td><td><p>Clears subgizmo selection for this node in the editor. Useful when subgizmo IDs become invalid after a property change.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Connect</span></td><td><p>Connects a <span class="parameter">signal</span> by name to a <span class="parameter">callable</span>. Optional <span class="parameter">flags</span> can be also added to configure the connection's behavior (see <span class="noLink">ConnectFlags</span> constants).</p><p>A signal can only be connected once to the same <span class="noLink">Callable</span>. If the signal is already connected, this method returns <span class="noLink">InvalidParameter</span> and pushes an error message, unless the signal is connected with <span class="noLink">ReferenceCounted</span>. To prevent this, use <span class="noLink">IsConnected(StringName, Callable)</span> first to check for existing connections.</p><p>If the <span class="parameter">callable</span>'s object is freed, the connection will be lost.</p><p><b>Examples with recommended syntax:</b></p><p>Connecting signals is one of the most common operations in Godot and the API gives many options to do so, which are described further down. The code block below shows the recommended approach.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override void _Ready()
{
    var button = new Button();
    // C# supports passing signals as events, so we can use this idiomatic construct:
    button.ButtonDown += OnButtonDown;

    // This assumes that a `Player` class exists, which defines a `Hit` signal.
    var player = new Player();
    // We can use lambdas when we need to bind additional parameters.
    player.Hit += () =&gt; OnPlayerHit("sword", 100);
}

private void OnButtonDown()
{
    GD.Print("Button down!");
}

private void OnPlayerHit(string weaponType, int damage)
{
    GD.Print($"Hit with weapon {weaponType} for {damage} damage.");
}</code></pre></div></div></p><p><b><span class="code">Object.connect()</span> or <span class="code">Signal.connect()</span>?</b></p><p>As seen above, the recommended method to connect signals is not <span class="noLink">Connect(StringName, Callable, UInt32)</span>. The code block below shows the four options for connecting signals, using either this legacy method or the recommended <span class="code">Signal.connect</span>, and using either an implicit <span class="noLink">Callable</span> or a manually defined one.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override void _Ready()
{
    var button = new Button();
    // Option 1: In C#, we can use signals as events and connect with this idiomatic syntax:
    button.ButtonDown += OnButtonDown;
    // Option 2: GodotObject.Connect() with a constructed Callable from a method group.
    button.Connect(Button.SignalName.ButtonDown, Callable.From(OnButtonDown));
    // Option 3: GodotObject.Connect() with a constructed Callable using a target object and method name.
    button.Connect(Button.SignalName.ButtonDown, new Callable(this, MethodName.OnButtonDown));
}

private void OnButtonDown()
{
    GD.Print("Button down!");
}</code></pre></div></div></p><p>While all options have the same outcome (<span class="code">button</span>'s <span class="noLink">ButtonDown</span> signal will be connected to <span class="code">_on_button_down</span>), <b>option 3</b> offers the best validation: it will print a compile-time error if either the <span class="code">button_down</span><span class="noLink">Signal</span> or the <span class="code">_on_button_down</span><span class="noLink">Callable</span> are not defined. On the other hand, <b>option 2</b> only relies on string names and will only be able to validate either names at runtime: it will print a runtime error if <span class="code">"button_down"</span> doesn't correspond to a signal, or if <span class="code">"_on_button_down"</span> is not a registered method in the object <span class="code">self</span>. The main reason for using options 1, 2, or 4 would be if you actually need to use strings (e.g. to connect signals programmatically based on strings read from a configuration file). Otherwise, option 3 is the recommended (and fastest) method.</p><p><b>Binding and passing parameters:</b></p><p>The syntax to bind parameters is through <span class="code">Callable.bind</span>, which returns a copy of the <span class="noLink">Callable</span> with its parameters bound.</p><p>When calling <span class="noLink">EmitSignal(StringName, <span id="LSTA7B2252C_60" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_61" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> or <span class="code">Signal.emit</span>, the signal parameters can be also passed. The examples below show the relationship between these signal parameters and bound parameters.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">public override void _Ready()
{
    // This assumes that a `Player` class exists, which defines a `Hit` signal.
    var player = new Player();
    // Using lambda expressions that create a closure that captures the additional parameters.
    // The lambda only receives the parameters defined by the signal's delegate.
    player.Hit += (hitBy, level) =&gt; OnPlayerHit(hitBy, level, "sword", 100);

    // Parameters added when emitting the signal are passed first.
    player.EmitSignal(SignalName.Hit, "Dark lord", 5);
}

// We pass two arguments when emitting (`hit_by`, `level`),
// and bind two more arguments when connecting (`weapon_type`, `damage`).
private void OnPlayerHit(string hitBy, int level, string weaponType, int damage)
{
    GD.Print($"Hit by {hitBy} (level {level}) with weapon {weaponType} for {damage} damage.");
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">CreateTween</span></td><td><p>Creates a new <span class="noLink">Tween</span> and binds it to this node.</p><p>This is the equivalent of doing:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">GetTree().CreateTween().BindNode(this);</code></pre></div></div></p><p>The Tween will start automatically on the next process frame or physics frame (depending on <span class="noLink">TweenProcessMode</span>). See <span class="noLink">BindNode(Node)</span> for more info on Tweens bound to nodes.</p><p><b>Note:</b> The method can still be used when the node is not inside <span class="noLink">SceneTree</span>. It can fail in an unlikely case of using a custom <span class="noLink">MainLoop</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="6a8f5d0a-5ffb-edf4-c736-a3210cf2e51f.htm">Despawn</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">Disconnect</span></td><td><p>Disconnects a <span class="parameter">signal</span> by name from a given <span class="parameter">callable</span>. If the connection does not exist, generates an error. Use <span class="noLink">IsConnected(StringName, Callable)</span> to make sure that the connection exists.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Dispose<span id="LSTA7B2252C_62" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span></td><td>
            Disposes of this <span class="noLink">GodotObject</span>.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Dispose(Boolean)</span></td><td>
            Disposes implementation of this <span class="noLink">GodotObject</span>.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Duplicate</span></td><td><p>Duplicates the node, returning a new node with all of its properties, signals and groups copied from the original. The behavior can be tweaked through the <span class="parameter">flags</span> (see <span class="noLink">DuplicateFlags</span>).</p><p><b>Note:</b> For nodes with a <span class="noLink">Script</span> attached, if <span class="noLink">#ctor<span id="LSTA7B2252C_63" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> has been defined with required parameters, the duplicated node will not have a <span class="noLink">Script</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">EmitSignal</span></td><td><p>Emits the given <span class="parameter">signal</span> by name. The signal must exist, so it should be a built-in signal of this class or one of its inherited classes, or a user-defined signal (see <span class="noLink">AddUserSignal(String, Array)</span>). This method supports a variable number of arguments, so parameters can be passed as a comma separated list.</p><p>Returns <span class="noLink">Unavailable</span> if <span class="parameter">signal</span> does not exist or the parameters are invalid.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">EmitSignal(SignalName.Hit, "sword", 100);
EmitSignal(SignalName.GameOver);</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">signal</span> must be in snake_case when referring to built-in Godot signals. Prefer using the names exposed in the <span class="code">SignalName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><span class="noLink">Finalize</span></td><td><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">FindChild</span></td><td><p>Finds the first descendant of this node whose <span class="noLink">Name</span> matches <span class="parameter">pattern</span>, returning <span class="keyword"><span id="LSTA7B2252C_64" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if no match is found. The matching is done against node names, <i>not</i> their paths, through <span class="code">String.match</span>. As such, it is case-sensitive, <span class="code">"*"</span> matches zero or more characters, and <span class="code">"?"</span> matches any single character.</p><p>If <span class="parameter">recursive</span> is <span class="keyword"><span id="LSTA7B2252C_65" data-languageSpecificText="vb=False|nu=false"></span></span>, only this node's direct children are checked. Nodes are checked in tree order, so this node's first direct child is checked first, then its own direct children, etc., before moving to the second direct child, and so on. Internal children are also included in the search (see <span class="code">internal</span> parameter in <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>).</p><p>If <span class="parameter">owned</span> is <span class="keyword"><span id="LSTA7B2252C_66" data-languageSpecificText="vb=True|nu=true"></span></span>, only descendants with a valid <span class="noLink">Owner</span> node are checked.</p><p><b>Note:</b> This method can be very slow. Consider storing a reference to the found node in a variable. Alternatively, use <span class="noLink">GetNode(NodePath)</span> with unique names (see <span class="noLink">UniqueNameInOwner</span>).</p><p><b>Note:</b> To find all descendant nodes matching a pattern or a class type, see <span class="noLink">FindChildren(String, String, Boolean, Boolean)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">FindChildren</span></td><td><p>Finds all descendants of this node whose names match <span class="parameter">pattern</span>, returning an empty <span class="noLink">Array</span> if no match is found. The matching is done against node names, <i>not</i> their paths, through <span class="code">String.match</span>. As such, it is case-sensitive, <span class="code">"*"</span> matches zero or more characters, and <span class="code">"?"</span> matches any single character.</p><p>If <span class="parameter">type</span> is not empty, only ancestors inheriting from <span class="parameter">type</span> are included (see <span class="noLink">IsClass(String)</span>).</p><p>If <span class="parameter">recursive</span> is <span class="keyword"><span id="LSTA7B2252C_67" data-languageSpecificText="vb=False|nu=false"></span></span>, only this node's direct children are checked. Nodes are checked in tree order, so this node's first direct child is checked first, then its own direct children, etc., before moving to the second direct child, and so on. Internal children are also included in the search (see <span class="code">internal</span> parameter in <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>).</p><p>If <span class="parameter">owned</span> is <span class="keyword"><span id="LSTA7B2252C_68" data-languageSpecificText="vb=True|nu=true"></span></span>, only descendants with a valid <span class="noLink">Owner</span> node are checked.</p><p><b>Note:</b> This method can be very slow. Consider storing references to the found nodes in a variable.</p><p><b>Note:</b> To find a single descendant node matching a pattern, see <span class="noLink">FindChild(String, Boolean, Boolean)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">FindParent</span></td><td><p>Finds the first ancestor of this node whose <span class="noLink">Name</span> matches <span class="parameter">pattern</span>, returning <span class="keyword"><span id="LSTA7B2252C_69" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if no match is found. The matching is done through <span class="code">String.match</span>. As such, it is case-sensitive, <span class="code">"*"</span> matches zero or more characters, and <span class="code">"?"</span> matches any single character. See also <span class="noLink">FindChild(String, Boolean, Boolean)</span> and <span class="noLink">FindChildren(String, String, Boolean, Boolean)</span>.</p><p><b>Note:</b> As this method walks upwards in the scene tree, it can be slow in large, deeply nested nodes. Consider storing a reference to the found node in a variable. Alternatively, use <span class="noLink">GetNode(NodePath)</span> with unique names (see <span class="noLink">UniqueNameInOwner</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ForceUpdateTransform</span></td><td><p>Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Free</span></td><td><p>Deletes the object from memory. Pre-existing references to the object become invalid, and any attempt to access them will result in a run-time error. Checking the references with <span class="code">@GlobalScope.is_instance_valid</span> will return <span class="keyword"><span id="LSTA7B2252C_70" data-languageSpecificText="vb=False|nu=false"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Get</span></td><td><p>Returns the <span class="noLink">Variant</span> value of the given <span class="parameter">property</span>. If the <span class="parameter">property</span> does not exist, this method returns <span class="keyword"><span id="LSTA7B2252C_71" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.Rotation = 1.5f;
var a = node.Get(Node2D.PropertyName.Rotation); // a is 1.5</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">property</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetChild``1</span></td><td>
            Returns a child node by its index (see <span class="noLink">GetChildCount(Boolean)</span>).
            This method is often used for iterating all children of a node.
            Negative indices access the children from the last one.
            To access a child node via its name, use <span class="noLink">GetNode(NodePath)</span>.
            <br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetChildCount</span></td><td><p>Returns the number of children of this node.</p><p>If <span class="parameter">includeInternal</span> is <span class="keyword"><span id="LSTA7B2252C_72" data-languageSpecificText="vb=False|nu=false"></span></span>, internal children are not counted (see <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>'s <span class="code">internal</span> parameter).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetChildOrNull``1</span></td><td>
            Returns a child node by its index (see <span class="noLink">GetChildCount(Boolean)</span>).
            This method is often used for iterating all children of a node.
            Negative indices access the children from the last one.
            To access a child node via its name, use <span class="noLink">GetNode(NodePath)</span>.
            <br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetChildren</span></td><td><p>Returns all children of this node inside an <span class="noLink">Array</span>.</p><p>If <span class="parameter">includeInternal</span> is <span class="keyword"><span id="LSTA7B2252C_73" data-languageSpecificText="vb=False|nu=false"></span></span>, excludes internal children from the returned array (see <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>'s <span class="code">internal</span> parameter).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetClass</span></td><td><p>Returns the object's built-in class name, as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>. See also <span class="noLink">IsClass(String)</span>.</p><p><b>Note:</b> This method ignores <span class="code">class_name</span> declarations. If this object's script has defined a <span class="code">class_name</span>, the base, built-in class name is returned instead.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetGizmos</span></td><td><p>Returns all the gizmos attached to this <span class="noLink">Node3D</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GetGroups</span></td><td><p>Returns an <span class="noLink">Array</span> of group names that the node has been added to.</p><p><b>Note:</b> To improve performance, the order of group names is <i>not</i> guaranteed and may vary between project runs. Therefore, do not rely on the group order.</p><p><b>Note:</b> This method may also return some group names starting with an underscore (<span class="code">_</span>). These are internally used by the engine. To avoid conflicts, do not use custom groups starting with underscores. To exclude internal groups, see the following code snippet:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Stores the node's non-internal groups only (as a List of StringNames).
List&lt;string&gt; nonInternalGroups = new List&lt;string&gt;();
foreach (string group in GetGroups())
{
    if (!group.BeginsWith("_"))
        nonInternalGroups.Add(group);
}</code></pre></div></div></p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><span class="noLink">GetIncomingConnections</span></td><td><p>Returns an <span class="noLink">Array</span> of signal connections received by this object. Each connection is represented as a <span class="noLink">Dictionary</span> that contains three entries:</p><p>- <span class="code">signal</span> is a reference to the <span class="noLink">Signal</span>;</p><p>- <span class="code">callable</span> is a reference to the <span class="noLink">Callable</span>;</p><p>- <span class="code">flags</span> is a combination of <span class="noLink">ConnectFlags</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetIndex</span></td><td><p>Returns this node's order among its siblings. The first node's index is <span class="code">0</span>. See also <span class="noLink">GetChild(Int32, Boolean)</span>.</p><p>If <span class="parameter">includeInternal</span> is <span class="keyword"><span id="LSTA7B2252C_74" data-languageSpecificText="vb=False|nu=false"></span></span>, returns the index ignoring internal children. The first, non-internal child will have an index of <span class="code">0</span> (see <span class="noLink">AddChild(Node, Boolean, InternalMode)</span>'s <span class="code">internal</span> parameter).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetIndexed</span></td><td><p>Gets the object's property indexed by the given <span class="parameter">propertyPath</span>. The path should be a <span class="noLink">NodePath</span> relative to the current object and can use the colon character (<span class="code">:</span>) to access nested properties.</p><p><b>Examples:</b><span class="code">"position:x"</span> or <span class="code">"material:next_pass:blend_mode"</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.Position = new Vector2(5, -10);
var a = node.GetIndexed("position");   // a is Vector2(5, -10)
var b = node.GetIndexed("position:y"); // b is -10</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">propertyPath</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><p><b>Note:</b> This method does not support actual paths to nodes in the <span class="noLink">SceneTree</span>, only sub-property paths. In the context of nodes, use <span class="noLink">GetNodeAndResource(NodePath)</span> instead.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><a href="c5daf98b-0ecd-19b4-e76f-f6e3b2c102fa.htm">GetInput</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">GetInstanceId</span></td><td><p>Returns the object's unique instance ID. This ID can be saved in <span class="noLink">EncodedObjectAsId</span>, and can be used to retrieve this object instance with <span class="code">@GlobalScope.instance_from_id</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetLastExclusiveWindow</span></td><td><p>Returns the <span class="noLink">Window</span> that contains this node, or the last exclusive child in a chain of windows starting with the one that contains this node.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetMeta</span></td><td><p>Returns the object's metadata value for the given entry <span class="parameter">name</span>. If the entry does not exist, returns <span class="parameter">default</span>. If <span class="parameter">default</span> is <span class="keyword"><span id="LSTA7B2252C_75" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>, an error is also generated.</p><p><b>Note:</b> A metadata's name must be a valid identifier as per <span class="code">StringName.is_valid_identifier</span> method.</p><p><b>Note:</b> Metadata that has a name starting with an underscore (<span class="code">_</span>) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetMetaList</span></td><td><p>Returns the object's metadata entry names as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>[].</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetMethodArgumentCount</span></td><td><p>Returns the number of arguments of the given <span class="parameter">method</span> by name.</p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetMethodList</span></td><td><p>Returns this object's methods and their signatures as an <span class="noLink">Array</span> of dictionaries. Each <span class="noLink">Dictionary</span> contains the following entries:</p><p>- <span class="code">name</span> is the name of the method, as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>;</p><p>- <span class="code">args</span> is an <span class="noLink">Array</span> of dictionaries representing the arguments;</p><p>- <span class="code">default_args</span> is the default arguments as an <span class="noLink">Array</span> of variants;</p><p>- <span class="code">flags</span> is a combination of <span class="noLink">MethodFlags</span>;</p><p>- <span class="code">id</span> is the method's internal identifier <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a>;</p><p>- <span class="code">return</span> is the returned value, as a <span class="noLink">Dictionary</span>;</p><p><b>Note:</b> The dictionaries of <span class="code">args</span> and <span class="code">return</span> are formatted identically to the results of <span class="noLink">GetPropertyList<span id="LSTA7B2252C_76" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, although not all entries are used.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetMultiplayerAuthority</span></td><td><p>Returns the peer ID of the multiplayer authority for this node. See <span class="noLink">SetMultiplayerAuthority(Int32, Boolean)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="72e3a078-19e3-9e75-812d-aa8a575da83f.htm">GetNetworkChildren</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">GetNode``1</span></td><td>
            Fetches a node. The <span class="noLink">NodePath</span> can be either a relative path (from
            the current node) or an absolute path (in the scene tree) to a node. If the path
            does not exist, a <span class="keyword"><span id="LSTA7B2252C_77" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> instance is returned and an error
            is logged. Attempts to access methods on the return value will result in an
            "Attempt to call &lt;method&gt; on a null instance." error.
            Note: Fetching absolute paths only works when the node is inside the scene tree
            (see <span class="noLink">IsInsideTree<span id="LSTA7B2252C_78" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>).
            <br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetNodeAndResource</span></td><td><p>Fetches a node and its most nested resource as specified by the <span class="noLink">NodePath</span>'s subname. Returns an <span class="noLink">Array</span> of size <span class="code">3</span> where:</p><p>- Element <span class="code">0</span> is the <span class="noLink">Node</span>, or <span class="keyword"><span id="LSTA7B2252C_79" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if not found;</p><p>- Element <span class="code">1</span> is the subname's last nested <span class="noLink">Resource</span>, or <span class="keyword"><span id="LSTA7B2252C_80" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if not found;</p><p>- Element <span class="code">2</span> is the remaining <span class="noLink">NodePath</span>, referring to an existing, non-<span class="noLink">Resource</span> property (see <span class="noLink">GetIndexed(NodePath)</span>).</p><p><b>Example:</b> Assume that the child's <span class="noLink">Texture</span> has been assigned a <span class="noLink">AtlasTexture</span>:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var a = GetNodeAndResource(NodePath("Area2D/Sprite2D"));
GD.Print(a[0].Name); // Prints Sprite2D
GD.Print(a[1]);      // Prints &lt;null&gt;
GD.Print(a[2]);      // Prints ^"

var b = GetNodeAndResource(NodePath("Area2D/Sprite2D:texture:atlas"));
GD.Print(b[0].name);        // Prints Sprite2D
GD.Print(b[1].get_class()); // Prints AtlasTexture
GD.Print(b[2]);             // Prints ^""

var c = GetNodeAndResource(NodePath("Area2D/Sprite2D:texture:atlas:region"));
GD.Print(c[0].name);        // Prints Sprite2D
GD.Print(c[1].get_class()); // Prints AtlasTexture
GD.Print(c[2]);             // Prints ^":region"</code></pre></div></div></p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetNodeOrNull``1</span></td><td>
            Similar to <span class="noLink">GetNode(NodePath)</span>, but does not log an error if <span class="parameter">path</span>
            does not point to a valid <span class="noLink">Node</span>.
            <br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetOwner``1</span></td><td>
            The node owner. A node can have any other node as owner (as long as it is
            a valid parent, grandparent, etc. ascending in the tree). When saving a
            node (using <span class="noLink">PackedScene</span>), all the nodes it owns will be saved
            with it. This allows for the creation of complex <span class="noLink">SceneTree</span>s,
            with instancing and subinstancing.
            <br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetOwnerOrNull``1</span></td><td>
            The node owner. A node can have any other node as owner (as long as it is
            a valid parent, grandparent, etc. ascending in the tree). When saving a
            node (using <span class="noLink">PackedScene</span>), all the nodes it owns will be saved
            with it. This allows for the creation of complex <span class="noLink">SceneTree</span>s,
            with instancing and subinstancing.
            <br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetParent``1</span></td><td>
            Returns the parent node of the current node, or a <span class="keyword"><span id="LSTA7B2252C_81" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> instance
            if the node lacks a parent.
            <br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetParentNode3D</span></td><td><p>Returns the parent <span class="noLink">Node3D</span>, or <span class="keyword"><span id="LSTA7B2252C_82" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if no parent exists, the parent is not of type <span class="noLink">Node3D</span>, or <span class="noLink">TopLevel</span> is <span class="keyword"><span id="LSTA7B2252C_83" data-languageSpecificText="vb=True|nu=true"></span></span>.</p><p><b>Note:</b> Calling this method is not equivalent to <span class="code">get_parent() as Node3D</span>, which does not take <span class="noLink">TopLevel</span> into account.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GetParentOrNull``1</span></td><td>
            Returns the parent node of the current node, or a <span class="keyword"><span id="LSTA7B2252C_84" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> instance
            if the node lacks a parent.
            <br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetPath</span></td><td><p>Returns the node's absolute path, relative to the <span class="noLink">Root</span>. If the node is not inside the scene tree, this method fails and returns an empty <span class="noLink">NodePath</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetPathTo</span></td><td><p>Returns the relative <span class="noLink">NodePath</span> from this node to the specified <span class="parameter">node</span>. Both nodes must be in the same <span class="noLink">SceneTree</span> or scene hierarchy, otherwise this method fails and returns an empty <span class="noLink">NodePath</span>.</p><p>If <span class="parameter">useUniquePath</span> is <span class="keyword"><span id="LSTA7B2252C_85" data-languageSpecificText="vb=True|nu=true"></span></span>, returns the shortest path accounting for this node's unique name (see <span class="noLink">UniqueNameInOwner</span>).</p><p><b>Note:</b> If you get a relative path which starts from a unique node, the path may be longer than a normal relative path, due to the addition of the unique node's name.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetPhysicsProcessDeltaTime</span></td><td><p>Returns the time elapsed (in seconds) since the last physics callback. This value is identical to <span class="noLink">_PhysicsProcess(Double)</span>'s <span class="code">delta</span> parameter, and is often consistent at run-time, unless <span class="noLink">PhysicsTicksPerSecond</span> is changed. See also <span class="noLink">NotificationPhysicsProcess</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetProcessDeltaTime</span></td><td><p>Returns the time elapsed (in seconds) since the last process callback. This value is identical to <span class="noLink">_Process(Double)</span>'s <span class="code">delta</span> parameter, and may vary from frame to frame. See also <span class="noLink">NotificationProcess</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetPropertyList</span></td><td><p>Returns the object's property list as an <span class="noLink">Array</span> of dictionaries. Each <span class="noLink">Dictionary</span> contains the following entries:</p><p>- <span class="code">name</span> is the property's name, as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>;</p><p>- <span class="code">class_name</span> is an empty <span class="noLink">StringName</span>, unless the property is <span class="noLink">Object</span> and it inherits from a class;</p><p>- <span class="code">type</span> is the property's type, as an <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a> (see <span class="noLink">Type</span>);</p><p>- <span class="code">hint</span> is <i>how</i> the property is meant to be edited (see <span class="noLink">PropertyHint</span>);</p><p>- <span class="code">hint_string</span> depends on the hint (see <span class="noLink">PropertyHint</span>);</p><p>- <span class="code">usage</span> is a combination of <span class="noLink">PropertyUsageFlags</span>.</p><p><b>Note:</b> In GDScript, all class members are treated as properties. In C# and GDExtension, it may be necessary to explicitly mark class members as Godot properties using decorators or attributes.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetSceneInstanceLoadPlaceholder</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_86" data-languageSpecificText="vb=True|nu=true"></span></span> if this node is an instance load placeholder. See <span class="noLink">InstancePlaceholder</span> and <span class="noLink">SetSceneInstanceLoadPlaceholder(Boolean)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetScript</span></td><td><p>Returns the object's <span class="noLink">Script</span> instance, or <span class="keyword"><span id="LSTA7B2252C_87" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if no script is attached.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetSignalConnectionList</span></td><td><p>Returns an <span class="noLink">Array</span> of connections for the given <span class="parameter">signal</span> name. Each connection is represented as a <span class="noLink">Dictionary</span> that contains three entries:</p><p>- <span class="code">signal</span> is a reference to the <span class="noLink">Signal</span>;</p><p>- <span class="code">callable</span> is a reference to the connected <span class="noLink">Callable</span>;</p><p>- <span class="code">flags</span> is a combination of <span class="noLink">ConnectFlags</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetSignalList</span></td><td><p>Returns the list of existing signals as an <span class="noLink">Array</span> of dictionaries.</p><p><b>Note:</b> Due of the implementation, each <span class="noLink">Dictionary</span> is formatted very similarly to the returned values of <span class="noLink">GetMethodList<span id="LSTA7B2252C_88" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">GetTree</span></td><td><p>Returns the <span class="noLink">SceneTree</span> that contains this node. If this node is not inside the tree, generates an error and returns <span class="keyword"><span id="LSTA7B2252C_89" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>. See also <span class="noLink">IsInsideTree<span id="LSTA7B2252C_90" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetTreeString</span></td><td><p>Returns the tree as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the <span class="noLink">GetNode(NodePath)</span> function. It also can be used in game UI/UX.</p><p>May print, for example:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">TheGame
TheGame/Menu
TheGame/Menu/Label
TheGame/Menu/Camera2D
TheGame/SplashScreen
TheGame/SplashScreen/Camera2D</code></pre></div></div></p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetTreeStringPretty</span></td><td><p>Similar to <span class="noLink">GetTreeString<span id="LSTA7B2252C_91" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, this returns the tree as a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>. This version displays a more graphical representation similar to what is displayed in the Scene Dock. It is useful for inspecting larger trees.</p><p>May print, for example:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">┖╴TheGame
   ┠╴Menu
   ┃  ┠╴Label
   ┃  ┖╴Camera2D
   ┖╴SplashScreen
      ┖╴Camera2D</code></pre></div></div></p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><span class="noLink">GetViewport</span></td><td><p>Returns the node's closest <span class="noLink">Viewport</span> ancestor, if the node is inside the tree. Otherwise, returns <span class="keyword"><span id="LSTA7B2252C_92" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetWindow</span></td><td><p>Returns the <span class="noLink">Window</span> that contains this node. If the node is in the main window, this is equivalent to getting the root node (<span class="code">get_tree().get_root()</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">GetWorld3D</span></td><td><p>Returns the current <span class="noLink">World3D</span> resource this <span class="noLink">Node3D</span> node is registered to.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalRotate</span></td><td><p>Rotates the global (world) transformation around axis, a unit <span class="noLink">Vector3</span>, by specified angle in radians. The rotation axis is in global coordinate system.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalScale</span></td><td><p>Scales the global (world) transformation by the given <span class="noLink">Vector3</span> scale factors.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">GlobalTranslate</span></td><td><p>Moves the global (world) transformation by <span class="noLink">Vector3</span> offset. The offset is in global coordinate system.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">HasMeta</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_93" data-languageSpecificText="vb=True|nu=true"></span></span> if a metadata entry is found with the given <span class="parameter">name</span>. See also <span class="noLink">GetMeta(StringName, Variant)</span>, <span class="noLink">SetMeta(StringName, Variant)</span> and <span class="noLink">RemoveMeta(StringName)</span>.</p><p><b>Note:</b> A metadata's name must be a valid identifier as per <span class="code">StringName.is_valid_identifier</span> method.</p><p><b>Note:</b> Metadata that has a name starting with an underscore (<span class="code">_</span>) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">HasMethod</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_94" data-languageSpecificText="vb=True|nu=true"></span></span> if the given <span class="parameter">method</span> name exists in the object.</p><p><b>Note:</b> In C#, <span class="parameter">method</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">MethodName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">HasNode</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_95" data-languageSpecificText="vb=True|nu=true"></span></span> if the <span class="parameter">path</span> points to a valid node. See also <span class="noLink">GetNode(NodePath)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">HasNodeAndResource</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_96" data-languageSpecificText="vb=True|nu=true"></span></span> if <span class="parameter">path</span> points to a valid node and its subnames point to a valid <span class="noLink">Resource</span>, e.g. <span class="code">Area2D/CollisionShape2D:shape</span>. Properties that are not <span class="noLink">Resource</span> types (such as nodes or other <span class="noLink">Variant</span> types) are not considered. See also <span class="noLink">GetNodeAndResource(NodePath)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">HasSignal</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_97" data-languageSpecificText="vb=True|nu=true"></span></span> if the given <span class="parameter">signal</span> name exists in the object.</p><p><b>Note:</b> In C#, <span class="parameter">signal</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">SignalName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">HasUserSignal</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_98" data-languageSpecificText="vb=True|nu=true"></span></span> if the given user-defined <span class="parameter">signal</span> name exists. Only signals added with <span class="noLink">AddUserSignal(String, Array)</span> are included. See also <span class="noLink">RemoveUserSignal(StringName)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Hide</span></td><td><p>Disables rendering of this node. Changes <span class="noLink">Visible</span> to <span class="keyword"><span id="LSTA7B2252C_99" data-languageSpecificText="vb=False|nu=false"></span></span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">IsAncestorOf</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_100" data-languageSpecificText="vb=True|nu=true"></span></span> if the given <span class="parameter">node</span> is a direct or indirect child of this node.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsBlockingSignals</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_101" data-languageSpecificText="vb=True|nu=true"></span></span> if the object is blocking its signals from being emitted. See <span class="noLink">SetBlockSignals(Boolean)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">IsClass</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_102" data-languageSpecificText="vb=True|nu=true"></span></span> if the object inherits from the given <span class="parameter">class</span>. See also <span class="noLink">GetClass<span id="LSTA7B2252C_103" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var sprite2D = new Sprite2D();
sprite2D.IsClass("Sprite2D"); // Returns true
sprite2D.IsClass("Node");     // Returns true
sprite2D.IsClass("Node3D");   // Returns false</code></pre></div></div></p><p><b>Note:</b> This method ignores <span class="code">class_name</span> declarations in the object's script.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">IsConnected</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_104" data-languageSpecificText="vb=True|nu=true"></span></span> if a connection exists between the given <span class="parameter">signal</span> name and <span class="parameter">callable</span>.</p><p><b>Note:</b> In C#, <span class="parameter">signal</span> must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the <span class="code">SignalName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">IsDisplayedFolded</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_105" data-languageSpecificText="vb=True|nu=true"></span></span> if the node is folded (collapsed) in the Scene dock. This method is intended to be used in editor plugins and tools. See also <span class="noLink">SetDisplayFolded(Boolean)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsEditableInstance</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_106" data-languageSpecificText="vb=True|nu=true"></span></span> if <span class="parameter">node</span> has editable children enabled relative to this node. This method is intended to be used in editor plugins and tools. See also <span class="noLink">SetEditableInstance(Node, Boolean)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsGreaterThan</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_107" data-languageSpecificText="vb=True|nu=true"></span></span> if the given <span class="parameter">node</span> occurs later in the scene hierarchy than this node. A node occurring later is usually processed last.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsInGroup</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_108" data-languageSpecificText="vb=True|nu=true"></span></span> if this node has been added to the given <span class="parameter">group</span>. See <span class="noLink">AddToGroup(StringName, Boolean)</span> and <span class="noLink">RemoveFromGroup(StringName)</span>. See also notes in the description, and the <span class="noLink">SceneTree</span>'s group methods.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsInsideTree</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_109" data-languageSpecificText="vb=True|nu=true"></span></span> if this node is currently inside a <span class="noLink">SceneTree</span>. See also <span class="noLink">GetTree<span id="LSTA7B2252C_110" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsLocalTransformNotificationEnabled</span></td><td><p>Returns whether node notifies about its local transformation changes. <span class="noLink">Node3D</span> will not propagate this by default.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">IsMultiplayerAuthority</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_111" data-languageSpecificText="vb=True|nu=true"></span></span> if the local system is the multiplayer authority of this node.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsNodeReady</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_112" data-languageSpecificText="vb=True|nu=true"></span></span> if the node is ready, i.e. it's inside scene tree and all its children are initialized.</p><p><span class="noLink">RequestReady<span id="LSTA7B2252C_113" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> resets it back to <span class="keyword"><span id="LSTA7B2252C_114" data-languageSpecificText="vb=False|nu=false"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsPartOfEditedScene</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_115" data-languageSpecificText="vb=True|nu=true"></span></span> if the node is part of the scene currently opened in the editor.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsPhysicsInterpolated</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_116" data-languageSpecificText="vb=True|nu=true"></span></span> if physics interpolation is enabled for this node (see <span class="noLink">PhysicsInterpolationMode</span>).</p><p><b>Note:</b> Interpolation will only be active if both the flag is set <b>and</b> physics interpolation is enabled within the <span class="noLink">SceneTree</span>. This can be tested using <span class="noLink">IsPhysicsInterpolatedAndEnabled<span id="LSTA7B2252C_117" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsPhysicsInterpolatedAndEnabled</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_118" data-languageSpecificText="vb=True|nu=true"></span></span> if physics interpolation is enabled (see <span class="noLink">PhysicsInterpolationMode</span>) <b>and</b> enabled in the <span class="noLink">SceneTree</span>.</p><p>This is a convenience version of <span class="noLink">IsPhysicsInterpolated<span id="LSTA7B2252C_119" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> that also checks whether physics interpolation is enabled globally.</p><p>See <span class="noLink">PhysicsInterpolation</span> and <span class="code">ProjectSettings.physics/common/physics_interpolation</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsPhysicsProcessing</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_120" data-languageSpecificText="vb=True|nu=true"></span></span> if physics processing is enabled (see <span class="noLink">SetPhysicsProcess(Boolean)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsPhysicsProcessingInternal</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_121" data-languageSpecificText="vb=True|nu=true"></span></span> if internal physics processing is enabled (see <span class="noLink">SetPhysicsProcessInternal(Boolean)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsProcessing</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_122" data-languageSpecificText="vb=True|nu=true"></span></span> if processing is enabled (see <span class="noLink">SetProcess(Boolean)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsProcessingInput</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_123" data-languageSpecificText="vb=True|nu=true"></span></span> if the node is processing input (see <span class="noLink">SetProcessInput(Boolean)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsProcessingInternal</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_124" data-languageSpecificText="vb=True|nu=true"></span></span> if internal processing is enabled (see <span class="noLink">SetProcessInternal(Boolean)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsProcessingShortcutInput</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_125" data-languageSpecificText="vb=True|nu=true"></span></span> if the node is processing shortcuts (see <span class="noLink">SetProcessShortcutInput(Boolean)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsProcessingUnhandledInput</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_126" data-languageSpecificText="vb=True|nu=true"></span></span> if the node is processing unhandled input (see <span class="noLink">SetProcessUnhandledInput(Boolean)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsProcessingUnhandledKeyInput</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_127" data-languageSpecificText="vb=True|nu=true"></span></span> if the node is processing unhandled key input (see <span class="noLink">SetProcessUnhandledKeyInput(Boolean)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">IsQueuedForDeletion</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_128" data-languageSpecificText="vb=True|nu=true"></span></span> if the <span class="noLink">QueueFree<span id="LSTA7B2252C_129" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> method was called for the object.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">IsScaleDisabled</span></td><td><p>Returns whether this node uses a scale of <span class="code">(1, 1, 1)</span> or its local transformation scale.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">IsTransformNotificationEnabled</span></td><td><p>Returns whether the node notifies about its global and local transformation changes. <span class="noLink">Node3D</span> will not propagate this by default.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">IsVisibleInTree</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_130" data-languageSpecificText="vb=True|nu=true"></span></span> if the node is present in the <span class="noLink">SceneTree</span>, its <span class="noLink">Visible</span> property is <span class="keyword"><span id="LSTA7B2252C_131" data-languageSpecificText="vb=True|nu=true"></span></span> and all its ancestors are also visible. If any ancestor is hidden, this node will not be visible in the scene tree.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">LookAt</span></td><td><p>Rotates the node so that the local forward axis (-Z, <span class="code">Vector3.FORWARD</span>) points toward the <span class="parameter">target</span> position.</p><p>The local up axis (+Y) points as close to the <span class="parameter">up</span> vector as possible while staying perpendicular to the local forward axis. The resulting transform is orthogonal, and the scale is preserved. Non-uniform scaling may not work correctly.</p><p>The <span class="parameter">target</span> position cannot be the same as the node's position, the <span class="parameter">up</span> vector cannot be zero, and the direction from the node's position to the <span class="parameter">target</span> vector cannot be parallel to the <span class="parameter">up</span> vector.</p><p>Operations take place in global space, which means that the node must be in the scene tree.</p><p>If <span class="parameter">useModelFront</span> is <span class="keyword"><span id="LSTA7B2252C_132" data-languageSpecificText="vb=True|nu=true"></span></span>, the +Z axis (asset front) is treated as forward (implies +X is left) and points toward the <span class="parameter">target</span> position. By default, the -Z axis (camera forward) is treated as forward (implies +X is right).</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">LookAtFromPosition</span></td><td><p>Moves the node to the specified <span class="parameter">position</span>, and then rotates the node to point toward the <span class="parameter">target</span> as per <span class="noLink">LookAt(Vector3, Nullable<span id="LSTA7B2252C_133" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Vector3<span id="LSTA7B2252C_134" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Boolean)</span>. Operations take place in global space.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td>Creates a shallow copy of the current <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><span class="noLink">MoveChild</span></td><td><p>Moves <span class="parameter">childNode</span> to the given index. A node's index is the order among its siblings. If <span class="parameter">toIndex</span> is negative, the index is counted from the end of the list. See also <span class="noLink">GetChild(Int32, Boolean)</span> and <span class="noLink">GetIndex(Boolean)</span>.</p><p><b>Note:</b> The processing order of several engine callbacks (<span class="noLink">_Ready<span id="LSTA7B2252C_135" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, <span class="noLink">_Process(Double)</span>, etc.) and notifications sent through <span class="noLink">PropagateNotification(Int32)</span> is affected by tree order. <span class="noLink">CanvasItem</span> nodes are also rendered in tree order. See also <span class="noLink">ProcessPriority</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Notification</span></td><td><p>Sends the given <span class="parameter">what</span> notification to all classes inherited by the object, triggering calls to <span class="noLink">_Notification(Int32)</span>, starting from the highest ancestor (the <span class="noLink">GodotObject</span> class) and going down to the object's script.</p><p>If <span class="parameter">reversed</span> is <span class="keyword"><span id="LSTA7B2252C_136" data-languageSpecificText="vb=True|nu=true"></span></span>, the call order is reversed.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var player = new Node2D();
player.SetScript(GD.Load("res://player.gd"));

player.Notification(NotificationEnterTree);
// The call order is GodotObject -&gt; Node -&gt; Node2D -&gt; player.gd.

player.Notification(NotificationEnterTree, true);
// The call order is player.gd -&gt; Node2D -&gt; Node -&gt; GodotObject.</code></pre></div></div></p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">NotifyDeferredThreadGroup</span></td><td><p>Similar to <span class="noLink">CallDeferredThreadGroup(StringName, <span id="LSTA7B2252C_137" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_138" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, but for notifications.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">NotifyPropertyListChanged</span></td><td><p>Emits the <span class="noLink">PropertyListChanged</span> signal. This is mainly used to refresh the editor, so that the Inspector and editor plugins are properly updated.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">NotifyThreadSafe</span></td><td><p>Similar to <span class="noLink">CallThreadSafe(StringName, <span id="LSTA7B2252C_139" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_140" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, but for notifications.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="8223ecd0-445e-b56d-28c4-92537ced363c.htm">OnNetworkChangeActiveAnimation</a></td><td> </td></tr><tr><td><a href="3c632ac3-383b-30ef-65bc-fbc7fe34276e.htm">OnNetworkChangeAnimationPosition</a></td><td> </td></tr><tr><td><a href="42555190-4d5c-5145-d7d6-757d3d330689.htm">OnPropertyChanged(PropertyChangedEventArgs)</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><a href="5b43b6a7-c3e3-1b78-78d9-c5542b7736f0.htm">OnPropertyChanged(String)</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">Orthonormalize</span></td><td><p>Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's <span class="noLink">Transform3D</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><a href="516c5371-2e7a-3454-5a40-0179bf88676f.htm">Play</a></td><td> </td></tr><tr><td><span class="noLink">PrintTree</span></td><td><p>Prints the node and its children to the console, recursively. The node does not have to be inside the tree. This method outputs <span class="noLink">NodePath</span>s relative to this node, and is good for copy/pasting into <span class="noLink">GetNode(NodePath)</span>. See also <span class="noLink">PrintTreePretty<span id="LSTA7B2252C_141" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p>May print, for example:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">.
Menu
Menu/Label
Menu/Camera2D
SplashScreen
SplashScreen/Camera2D</code></pre></div></div></p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">PrintTreePretty</span></td><td><p>Prints the node and its children to the console, recursively. The node does not have to be inside the tree. Similar to <span class="noLink">PrintTree<span id="LSTA7B2252C_142" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, but the graphical representation looks like what is displayed in the editor's Scene dock. It is useful for inspecting larger trees.</p><p>May print, for example:</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">┖╴TheGame
   ┠╴Menu
   ┃  ┠╴Label
   ┃  ┖╴Camera2D
   ┖╴SplashScreen
      ┖╴Camera2D</code></pre></div></div></p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">PropagateCall</span></td><td><p>Calls the given <span class="parameter">method</span> name, passing <span class="parameter">args</span> as arguments, on this node and all of its children, recursively.</p><p>If <span class="parameter">parentFirst</span> is <span class="keyword"><span id="LSTA7B2252C_143" data-languageSpecificText="vb=True|nu=true"></span></span>, the method is called on this node first, then on all of its children. If <span class="keyword"><span id="LSTA7B2252C_144" data-languageSpecificText="vb=False|nu=false"></span></span>, the children's methods are called first.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">PropagateNotification</span></td><td><p>Calls <span class="noLink">Notification(Int32, Boolean)</span> with <span class="parameter">what</span> on this node and all of its children, recursively.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">PropertyCanRevert</span></td><td><p>Returns <span class="keyword"><span id="LSTA7B2252C_145" data-languageSpecificText="vb=True|nu=true"></span></span> if the given <span class="parameter">property</span> has a custom default value. Use <span class="noLink">PropertyGetRevert(StringName)</span> to get the <span class="parameter">property</span>'s default value.</p><p><b>Note:</b> This method is used by the Inspector dock to display a revert icon. The object must implement <span class="noLink">_PropertyCanRevert(StringName)</span> to customize the default value. If <span class="noLink">_PropertyCanRevert(StringName)</span> is not implemented, this method returns <span class="keyword"><span id="LSTA7B2252C_146" data-languageSpecificText="vb=False|nu=false"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">PropertyGetRevert</span></td><td><p>Returns the custom default value of the given <span class="parameter">property</span>. Use <span class="noLink">PropertyCanRevert(StringName)</span> to check if the <span class="parameter">property</span> has a custom default value.</p><p><b>Note:</b> This method is used by the Inspector dock to display a revert icon. The object must implement <span class="noLink">_PropertyGetRevert(StringName)</span> to customize the default value. If <span class="noLink">_PropertyGetRevert(StringName)</span> is not implemented, this method returns <span class="keyword"><span id="LSTA7B2252C_147" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">QueueFree</span></td><td><p>Queues this node to be deleted at the end of the current frame. When deleted, all of its children are deleted as well, and all references to the node and its children become invalid.</p><p>Unlike with <span class="noLink">Free<span id="LSTA7B2252C_148" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, the node is not deleted instantly, and it can still be accessed before deletion. It is also safe to call <span class="noLink">QueueFree<span id="LSTA7B2252C_149" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> multiple times. Use <span class="noLink">IsQueuedForDeletion<span id="LSTA7B2252C_150" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> to check if the node will be deleted at the end of the frame.</p><p><b>Note:</b> The node will only be freed after all other deferred calls are finished. Using this method is not always the same as calling <span class="noLink">Free<span id="LSTA7B2252C_151" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> through <span class="noLink">CallDeferred(StringName, <span id="LSTA7B2252C_152" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_153" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">RemoveChild</span></td><td><p>Removes a child <span class="parameter">node</span>. The <span class="parameter">node</span>, along with its children, are <b>not</b> deleted. To delete a node, see <span class="noLink">QueueFree<span id="LSTA7B2252C_154" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><b>Note:</b> When this node is inside the tree, this method sets the <span class="noLink">Owner</span> of the removed <span class="parameter">node</span> (or its descendants) to <span class="keyword"><span id="LSTA7B2252C_155" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>, if their <span class="noLink">Owner</span> is no longer an ancestor (see <span class="noLink">IsAncestorOf(Node)</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">RemoveFromGroup</span></td><td><p>Removes the node from the given <span class="parameter">group</span>. Does nothing if the node is not in the <span class="parameter">group</span>. See also notes in the description, and the <span class="noLink">SceneTree</span>'s group methods.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">RemoveMeta</span></td><td><p>Removes the given entry <span class="parameter">name</span> from the object's metadata. See also <span class="noLink">HasMeta(StringName)</span>, <span class="noLink">GetMeta(StringName, Variant)</span> and <span class="noLink">SetMeta(StringName, Variant)</span>.</p><p><b>Note:</b> A metadata's name must be a valid identifier as per <span class="code">StringName.is_valid_identifier</span> method.</p><p><b>Note:</b> Metadata that has a name starting with an underscore (<span class="code">_</span>) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">RemoveUserSignal</span></td><td><p>Removes the given user signal <span class="parameter">signal</span> from the object. See also <span class="noLink">AddUserSignal(String, Array)</span> and <span class="noLink">HasUserSignal(StringName)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Reparent</span></td><td><p>Changes the parent of this <span class="noLink">Node</span> to the <span class="parameter">newParent</span>. The node needs to already have a parent. The node's <span class="noLink">Owner</span> is preserved if its owner is still reachable from the new location (i.e., the node is still a descendant of the new parent after the operation).</p><p>If <span class="parameter">keepGlobalTransform</span> is <span class="keyword"><span id="LSTA7B2252C_156" data-languageSpecificText="vb=True|nu=true"></span></span>, the node's global transform will be preserved if supported. <span class="noLink">Node2D</span>, <span class="noLink">Node3D</span> and <span class="noLink">Control</span> support this argument (but <span class="noLink">Control</span> keeps only position).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ReplaceBy</span></td><td><p>Replaces this node by the given <span class="parameter">node</span>. All children of this node are moved to <span class="parameter">node</span>.</p><p>If <span class="parameter">keepGroups</span> is <span class="keyword"><span id="LSTA7B2252C_157" data-languageSpecificText="vb=True|nu=true"></span></span>, the <span class="parameter">node</span> is added to the same groups that the replaced node is in (see <span class="noLink">AddToGroup(StringName, Boolean)</span>).</p><p><b>Warning:</b> The replaced node is removed from the tree, but it is <b>not</b> deleted. To prevent memory leaks, store a reference to the node in a variable, or use <span class="noLink">Free<span id="LSTA7B2252C_158" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">RequestReady</span></td><td><p>Requests <span class="noLink">_Ready<span id="LSTA7B2252C_159" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> to be called again the next time the node enters the tree. Does <b>not</b> immediately call <span class="noLink">_Ready<span id="LSTA7B2252C_160" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><b>Note:</b> This method only affects the current node. If the node's children also need to request ready, this method needs to be called for each one of them. When the node and its children enter the tree again, the order of <span class="noLink">_Ready<span id="LSTA7B2252C_161" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> callbacks will be the same as normal.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ResetPhysicsInterpolation</span></td><td><p>When physics interpolation is active, moving a node to a radically different transform (such as placement within a level) can result in a visible glitch as the object is rendered moving from the old to new position over the physics tick.</p><p>That glitch can be prevented by calling this method, which temporarily disables interpolation until the physics tick is complete.</p><p>The notification <span class="noLink">NotificationResetPhysicsInterpolation</span> will be received by the node and all children recursively.</p><p><b>Note:</b> This function should be called <b>after</b> moving the node, rather than before.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Rotate</span></td><td><p>Rotates the local transformation around axis, a unit <span class="noLink">Vector3</span>, by specified angle in radians.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotateObjectLocal</span></td><td><p>Rotates the local transformation around axis, a unit <span class="noLink">Vector3</span>, by specified angle in radians. The rotation axis is in object-local coordinate system.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotateX</span></td><td><p>Rotates the local transformation around the X axis by angle in radians.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotateY</span></td><td><p>Rotates the local transformation around the Y axis by angle in radians.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">RotateZ</span></td><td><p>Rotates the local transformation around the Z axis by angle in radians.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Rpc</span></td><td><p>Sends a remote procedure call request for the given <span class="parameter">method</span> to peers on the network (and locally), sending additional arguments to the method called by the RPC. The call request will only be received by nodes with the same <span class="noLink">NodePath</span>, including the exact same <span class="noLink">Name</span>. Behavior depends on the RPC configuration for the given <span class="parameter">method</span> (see <span class="noLink">RpcConfig(StringName, Variant)</span> and [annotation @GDScript.@rpc]). By default, methods are not exposed to RPCs.</p><p>May return <span class="noLink">Ok</span> if the call is successful, <span class="noLink">InvalidParameter</span> if the arguments passed in the <span class="parameter">method</span> do not match, <span class="noLink">Unconfigured</span> if the node's <span class="noLink">Multiplayer</span> cannot be fetched (such as when the node is not inside the tree), <span class="noLink">ConnectionError</span> if <span class="noLink">Multiplayer</span>'s connection is not available.</p><p><b>Note:</b> You can only safely use RPCs on clients after you received the <span class="noLink">ConnectedToServer</span> signal from the <span class="noLink">MultiplayerApi</span>. You also need to keep track of the connection state, either by the <span class="noLink">MultiplayerApi</span> signals like <span class="noLink">ServerDisconnected</span> or by checking (<span class="code">get_multiplayer().peer.get_connection_status() == CONNECTION_CONNECTED</span>).</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">RpcConfig</span></td><td><p>Changes the RPC configuration for the given <span class="parameter">method</span>. <span class="parameter">config</span> should either be <span class="keyword"><span id="LSTA7B2252C_162" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> to disable the feature (as by default), or a <span class="noLink">Dictionary</span> containing the following entries:</p><p>- <span class="code">rpc_mode</span>: see <span class="noLink">RpcMode</span>;</p><p>- <span class="code">transfer_mode</span>: see <span class="noLink">TransferModeEnum</span>;</p><p>- <span class="code">call_local</span>: if <span class="keyword"><span id="LSTA7B2252C_163" data-languageSpecificText="vb=True|nu=true"></span></span>, the method will also be called locally;</p><p>- <span class="code">channel</span>: an <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a> representing the channel to send the RPC on.</p><p><b>Note:</b> In GDScript, this method corresponds to the [annotation @GDScript.@rpc] annotation, with various parameters passed (<span class="code">@rpc(any)</span>, <span class="code">@rpc(authority)</span>...). See also the <a href="$DOCS_URL/tutorials/networking/high_level_multiplayer.html">high-level multiplayer</a> tutorial.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">RpcId</span></td><td><p>Sends a <span class="noLink">Rpc(StringName, <span id="LSTA7B2252C_164" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_165" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> to a specific peer identified by <span class="parameter">peerId</span> (see <span class="noLink">SetTargetPeer(Int32)</span>).</p><p>May return <span class="noLink">Ok</span> if the call is successful, <span class="noLink">InvalidParameter</span> if the arguments passed in the <span class="parameter">method</span> do not match, <span class="noLink">Unconfigured</span> if the node's <span class="noLink">Multiplayer</span> cannot be fetched (such as when the node is not inside the tree), <span class="noLink">ConnectionError</span> if <span class="noLink">Multiplayer</span>'s connection is not available.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ScaleObjectLocal</span></td><td><p>Scales the local transformation by given 3D scale factors in object-local coordinate system.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">Set</span></td><td><p>Assigns <span class="parameter">value</span> to the given <span class="parameter">property</span>. If the property does not exist or the given <span class="parameter">value</span>'s type doesn't match, nothing happens.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.Set(Node2D.PropertyName.GlobalScale, new Vector2(8, 2.5));
GD.Print(node.GlobalScale); // Prints Vector2(8, 2.5)</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">property</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetBlockSignals</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_166" data-languageSpecificText="vb=True|nu=true"></span></span>, the object becomes unable to emit signals. As such, <span class="noLink">EmitSignal(StringName, <span id="LSTA7B2252C_167" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_168" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span> and signal connections will not work, until it is set to <span class="keyword"><span id="LSTA7B2252C_169" data-languageSpecificText="vb=False|nu=false"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetDeferred</span></td><td><p>Assigns <span class="parameter">value</span> to the given <span class="parameter">property</span>, at the end of the current frame. This is equivalent to calling <span class="noLink">Set(StringName, Variant)</span> through <span class="noLink">CallDeferred(StringName, <span id="LSTA7B2252C_170" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_171" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.Rotation = 1.5f;
node.SetDeferred(Node2D.PropertyName.Rotation, 3f);
GD.Print(node.Rotation); // Prints 1.5

await ToSignal(GetTree(), SceneTree.SignalName.ProcessFrame);
GD.Print(node.Rotation); // Prints 3.0</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">property</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetDeferredThreadGroup</span></td><td><p>Similar to <span class="noLink">CallDeferredThreadGroup(StringName, <span id="LSTA7B2252C_172" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_173" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, but for setting properties.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetDisableScale</span></td><td><p>Sets whether the node uses a scale of <span class="code">(1, 1, 1)</span> or its local transformation scale. Changes to the local transformation scale are preserved.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">SetDisplayFolded</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_174" data-languageSpecificText="vb=True|nu=true"></span></span>, the node appears folded in the Scene dock. As a result, all of its children are hidden. This method is intended to be used in editor plugins and tools, but it also works in release builds. See also <span class="noLink">IsDisplayedFolded<span id="LSTA7B2252C_175" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetEditableInstance</span></td><td><p>Set to <span class="keyword"><span id="LSTA7B2252C_176" data-languageSpecificText="vb=True|nu=true"></span></span> to allow all nodes owned by <span class="parameter">node</span> to be available, and editable, in the Scene dock, even if their <span class="noLink">Owner</span> is not the scene root. This method is intended to be used in editor plugins and tools, but it also works in release builds. See also <span class="noLink">IsEditableInstance(Node)</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetIdentity</span></td><td><p>Reset all transformations for this node (sets its <span class="noLink">Transform3D</span> to the identity matrix).</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">SetIgnoreTransformNotification</span></td><td><p>Sets whether the node ignores notification that its transformation (global or local) changed.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">SetIndexed</span></td><td><p>Assigns a new <span class="parameter">value</span> to the property identified by the <span class="parameter">propertyPath</span>. The path should be a <span class="noLink">NodePath</span> relative to this object, and can use the colon character (<span class="code">:</span>) to access nested properties.</p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var node = new Node2D();
node.SetIndexed("position", new Vector2(42, 0));
node.SetIndexed("position:y", -10);
GD.Print(node.Position); // Prints (42, -10)</code></pre></div></div></p><p><b>Note:</b> In C#, <span class="parameter">propertyPath</span> must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the <span class="code">PropertyName</span> class to avoid allocating a new <span class="noLink">StringName</span> on each call.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetMessageTranslation</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_177" data-languageSpecificText="vb=True|nu=true"></span></span>, allows the object to translate messages with <span class="noLink">Tr(StringName, StringName)</span> and <span class="noLink">TrN(StringName, StringName, Int32, StringName)</span>. Enabled by default. See also <span class="noLink">CanTranslateMessages<span id="LSTA7B2252C_178" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetMeta</span></td><td><p>Adds or changes the entry <span class="parameter">name</span> inside the object's metadata. The metadata <span class="parameter">value</span> can be any <span class="noLink">Variant</span>, although some types cannot be serialized correctly.</p><p>If <span class="parameter">value</span> is <span class="keyword"><span id="LSTA7B2252C_179" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>, the entry is removed. This is the equivalent of using <span class="noLink">RemoveMeta(StringName)</span>. See also <span class="noLink">HasMeta(StringName)</span> and <span class="noLink">GetMeta(StringName, Variant)</span>.</p><p><b>Note:</b> A metadata's name must be a valid identifier as per <span class="code">StringName.is_valid_identifier</span> method.</p><p><b>Note:</b> Metadata that has a name starting with an underscore (<span class="code">_</span>) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetMultiplayerAuthority</span></td><td><p>Sets the node's multiplayer authority to the peer with the given peer <span class="parameter">id</span>. The multiplayer authority is the peer that has authority over the node on the network. Defaults to peer ID 1 (the server). Useful in conjunction with <span class="noLink">RpcConfig(StringName, Variant)</span> and the <span class="noLink">MultiplayerApi</span>.</p><p>If <span class="parameter">recursive</span> is <span class="keyword"><span id="LSTA7B2252C_180" data-languageSpecificText="vb=True|nu=true"></span></span>, the given peer is recursively set as the authority for all children of this node.</p><p><b>Warning:</b> This does <b>not</b> automatically replicate the new authority to other peers. It is the developer's responsibility to do so. You may replicate the new authority's information using <span class="noLink">SpawnFunction</span>, an RPC, or a <span class="noLink">MultiplayerSynchronizer</span>. Furthermore, the parent's authority does <b>not</b> propagate to newly added children.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetNotifyLocalTransform</span></td><td><p>Sets whether the node notifies about its local transformation changes. <span class="noLink">Node3D</span> will not propagate this by default.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">SetNotifyTransform</span></td><td><p>Sets whether the node notifies about its global and local transformation changes. <span class="noLink">Node3D</span> will not propagate this by default, unless it is in the editor context and it has a valid gizmo.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">SetPhysicsProcess</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_181" data-languageSpecificText="vb=True|nu=true"></span></span>, enables physics (fixed framerate) processing. When a node is being processed, it will receive a <span class="noLink">NotificationPhysicsProcess</span> at a fixed (usually 60 FPS, see <span class="noLink">PhysicsTicksPerSecond</span> to change) interval (and the <span class="noLink">_PhysicsProcess(Double)</span> callback will be called if it exists).</p><p><b>Note:</b> If <span class="noLink">_PhysicsProcess(Double)</span> is overridden, this will be automatically enabled before <span class="noLink">_Ready<span id="LSTA7B2252C_182" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetPhysicsProcessInternal</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_183" data-languageSpecificText="vb=True|nu=true"></span></span>, enables internal physics for this node. Internal physics processing happens in isolation from the normal <span class="noLink">_PhysicsProcess(Double)</span> calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting (<span class="noLink">SetPhysicsProcess(Boolean)</span>).</p><p><b>Warning:</b> Built-in nodes rely on internal processing for their internal logic. Disabling it is unsafe and may lead to unexpected behavior. Use this method if you know what you are doing.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetProcess</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_184" data-languageSpecificText="vb=True|nu=true"></span></span>, enables processing. When a node is being processed, it will receive a <span class="noLink">NotificationProcess</span> on every drawn frame (and the <span class="noLink">_Process(Double)</span> callback will be called if it exists).</p><p><b>Note:</b> If <span class="noLink">_Process(Double)</span> is overridden, this will be automatically enabled before <span class="noLink">_Ready<span id="LSTA7B2252C_185" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called.</p><p><b>Note:</b> This method only affects the <span class="noLink">_Process(Double)</span> callback, i.e. it has no effect on other callbacks like <span class="noLink">_PhysicsProcess(Double)</span>. If you want to disable all processing for the node, set <span class="noLink">ProcessMode</span> to <span class="noLink">Disabled</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetProcessInput</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_186" data-languageSpecificText="vb=True|nu=true"></span></span>, enables input processing.</p><p><b>Note:</b> If <span class="noLink">_Input(InputEvent)</span> is overridden, this will be automatically enabled before <span class="noLink">_Ready<span id="LSTA7B2252C_187" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called. Input processing is also already enabled for GUI controls, such as <span class="noLink">Button</span> and <span class="noLink">TextEdit</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetProcessInternal</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_188" data-languageSpecificText="vb=True|nu=true"></span></span>, enables internal processing for this node. Internal processing happens in isolation from the normal <span class="noLink">_Process(Double)</span> calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting (<span class="noLink">SetProcess(Boolean)</span>).</p><p><b>Warning:</b> Built-in nodes rely on internal processing for their internal logic. Disabling it is unsafe and may lead to unexpected behavior. Use this method if you know what you are doing.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetProcessShortcutInput</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_189" data-languageSpecificText="vb=True|nu=true"></span></span>, enables shortcut processing for this node.</p><p><b>Note:</b> If <span class="noLink">_ShortcutInput(InputEvent)</span> is overridden, this will be automatically enabled before <span class="noLink">_Ready<span id="LSTA7B2252C_190" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetProcessUnhandledInput</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_191" data-languageSpecificText="vb=True|nu=true"></span></span>, enables unhandled input processing. It enables the node to receive all input that was not previously handled (usually by a <span class="noLink">Control</span>).</p><p><b>Note:</b> If <span class="noLink">_UnhandledInput(InputEvent)</span> is overridden, this will be automatically enabled before <span class="noLink">_Ready<span id="LSTA7B2252C_192" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called. Unhandled input processing is also already enabled for GUI controls, such as <span class="noLink">Button</span> and <span class="noLink">TextEdit</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetProcessUnhandledKeyInput</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_193" data-languageSpecificText="vb=True|nu=true"></span></span>, enables unhandled key input processing.</p><p><b>Note:</b> If <span class="noLink">_UnhandledKeyInput(InputEvent)</span> is overridden, this will be automatically enabled before <span class="noLink">_Ready<span id="LSTA7B2252C_194" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetSceneInstanceLoadPlaceholder</span></td><td><p>If set to <span class="keyword"><span id="LSTA7B2252C_195" data-languageSpecificText="vb=True|nu=true"></span></span>, the node becomes a <span class="noLink">InstancePlaceholder</span> when packed and instantiated from a <span class="noLink">PackedScene</span>. See also <span class="noLink">GetSceneInstanceLoadPlaceholder<span id="LSTA7B2252C_196" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">SetScript</span></td><td><p>Attaches <span class="parameter">script</span> to the object, and instantiates it. As a result, the script's <span class="noLink">#ctor<span id="LSTA7B2252C_197" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called. A <span class="noLink">Script</span> is used to extend the object's functionality.</p><p>If a script already exists, its instance is detached, and its property values and state are lost. Built-in property values are still kept.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">SetSubgizmoSelection</span></td><td><p>Set subgizmo selection for this node in the editor.</p><p><b>Note:</b> The gizmo object would typically be an instance of <span class="code">EditorNode3DGizmo</span>, but the argument type is kept generic to avoid creating a dependency on editor classes in <span class="noLink">Node3D</span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">SetThreadSafe</span></td><td><p>Similar to <span class="noLink">CallThreadSafe(StringName, <span id="LSTA7B2252C_198" data-languageSpecificText="cpp=array&lt;"></span>Variant<span id="LSTA7B2252C_199" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</span>, but for setting properties.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Show</span></td><td><p>Enables rendering of this node. Changes <span class="noLink">Visible</span> to <span class="keyword"><span id="LSTA7B2252C_200" data-languageSpecificText="vb=True|nu=true"></span></span>.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">ToGlobal</span></td><td><p>Transforms <span class="parameter">localPoint</span> from this node's local space to world space.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">ToLocal</span></td><td><p>Transforms <span class="parameter">globalPoint</span> from world space to this node's local space.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">ToSignal</span></td><td>
            Returns a new <span class="noLink">SignalAwaiter</span> awaiter configured to complete when the instance
            <span class="parameter">source</span> emits the signal specified by the <span class="parameter">signal</span> parameter.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">ToString</span></td><td>
            Converts this <span class="noLink">GodotObject</span> to a string.
            <br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Tr</span></td><td><p>Translates a <span class="parameter">message</span>, using the translation catalogs configured in the Project Settings. Further <span class="parameter">context</span> can be specified to help with the translation. Note that most <span class="noLink">Control</span> nodes automatically translate their strings, so this method is mostly useful for formatted strings or custom drawn text.</p><p>If <span class="noLink">CanTranslateMessages<span id="LSTA7B2252C_201" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is <span class="keyword"><span id="LSTA7B2252C_202" data-languageSpecificText="vb=False|nu=false"></span></span>, or no translation is available, this method returns the <span class="parameter">message</span> without changes. See <span class="noLink">SetMessageTranslation(Boolean)</span>.</p><p>For detailed examples, see <a href="$DOCS_URL/tutorials/i18n/internationalizing_games.html">Internationalizing games</a>.</p><p><b>Note:</b> This method can't be used without an <span class="noLink">GodotObject</span> instance, as it requires the <span class="noLink">CanTranslateMessages<span id="LSTA7B2252C_203" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> method. To translate strings in a static context, use <span class="noLink">Translate(StringName, StringName)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Translate</span></td><td><p>Changes the node's position by the given offset <span class="noLink">Vector3</span>.</p><p>Note that the translation <span class="parameter">offset</span> is affected by the node's scale, so if scaled by e.g. <span class="code">(10, 1, 1)</span>, a translation by an offset of <span class="code">(2, 0, 0)</span> would actually add 20 (<span class="code">2 * 10</span>) to the X coordinate.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">TranslateObjectLocal</span></td><td><p>Changes the node's position by the given offset <span class="noLink">Vector3</span> in local space.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr><tr><td><span class="noLink">TrN</span></td><td><p>Translates a <span class="parameter">message</span> or <span class="parameter">pluralMessage</span>, using the translation catalogs configured in the Project Settings. Further <span class="parameter">context</span> can be specified to help with the translation.</p><p>If <span class="noLink">CanTranslateMessages<span id="LSTA7B2252C_204" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is <span class="keyword"><span id="LSTA7B2252C_205" data-languageSpecificText="vb=False|nu=false"></span></span>, or no translation is available, this method returns <span class="parameter">message</span> or <span class="parameter">pluralMessage</span>, without changes. See <span class="noLink">SetMessageTranslation(Boolean)</span>.</p><p>The <span class="parameter">n</span> is the number, or amount, of the message's subject. It is used by the translation system to fetch the correct plural form for the current language.</p><p>For detailed examples, see <a href="$DOCS_URL/tutorials/i18n/localization_using_gettext.html">Localization using gettext</a>.</p><p><b>Note:</b> Negative and <a href="https://learn.microsoft.com/dotnet/api/system.single" target="_blank" rel="noopener noreferrer">Single</a> numbers may not properly apply to some countable subjects. It's recommended to handle these cases with <span class="noLink">Tr(StringName, StringName)</span>.</p><p><b>Note:</b> This method can't be used without an <span class="noLink">GodotObject</span> instance, as it requires the <span class="noLink">CanTranslateMessages<span id="LSTA7B2252C_206" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> method. To translate strings in a static context, use <span class="noLink">TranslatePlural(StringName, StringName, Int32, StringName)</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">UpdateConfigurationWarnings</span></td><td><p>Refreshes the warnings displayed for this node in the Scene dock. Use <span class="noLink">_GetConfigurationWarnings<span id="LSTA7B2252C_207" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> to customize the warning messages to display.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">UpdateGizmos</span></td><td><p>Updates all the <span class="noLink">Node3D</span> gizmos attached to this node.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Events</h2><div id="IDAEASection"><table id="EventList" class="table is-hoverable"><tr><td><span class="noLink">ChildEnteredTree</span></td><td><p>Emitted when the child <span class="code">node</span> enters the <span class="noLink">SceneTree</span>, usually because this node entered the tree (see <span class="noLink">TreeEntered</span>), or <span class="noLink">AddChild(Node, Boolean, InternalMode)</span> has been called.</p><p>This signal is emitted <i>after</i> the child node's own <span class="noLink">NotificationEnterTree</span> and <span class="noLink">TreeEntered</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ChildExitingTree</span></td><td><p>Emitted when the child <span class="code">node</span> is about to exit the <span class="noLink">SceneTree</span>, usually because this node is exiting the tree (see <span class="noLink">TreeExiting</span>), or because the child <span class="code">node</span> is being removed or freed.</p><p>When this signal is received, the child <span class="code">node</span> is still accessible inside the tree. This signal is emitted <i>after</i> the child node's own <span class="noLink">TreeExiting</span> and <span class="noLink">NotificationExitTree</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ChildOrderChanged</span></td><td><p>Emitted when the list of children is changed. This happens when child nodes are added, moved or removed.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">EditorDescriptionChanged</span></td><td><p>Emitted when the node's editor description field changed.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><a href="b9f602a5-8d72-1e0d-3045-50447cad7205.htm">NetworkPropertyChanged</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><a href="ec7b5771-1ece-f070-f240-ed693dac61b0.htm">PropertyChanged</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr><tr><td><span class="noLink">PropertyListChanged</span></td><td><p>Emitted when <span class="noLink">NotifyPropertyListChanged<span id="LSTA7B2252C_208" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">Ready</span></td><td><p>Emitted when the node is considered ready, after <span class="noLink">_Ready<span id="LSTA7B2252C_209" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> is called.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">Renamed</span></td><td><p>Emitted when the node's <span class="noLink">Name</span> is changed, if the node is inside the tree.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ReplacingBy</span></td><td><p>Emitted when this node is being replaced by the <span class="code">node</span>, see <span class="noLink">ReplaceBy(Node, Boolean)</span>.</p><p>This signal is emitted <i>after</i><span class="code">node</span> has been added as a child of the original parent node, but <i>before</i> all original child nodes have been reparented to <span class="code">node</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">ScriptChanged</span></td><td><p>Emitted when the object's script is changed.</p><p><b>Note:</b> When this signal is emitted, the new script is not initialized yet. If you need to access the new script, defer connections to this signal with <span class="noLink">Deferred</span>.</p><br />(Inherited from <span class="noLink">GodotObject</span>)</td></tr><tr><td><span class="noLink">TreeEntered</span></td><td><p>Emitted when the node enters the tree.</p><p>This signal is emitted <i>after</i> the related <span class="noLink">NotificationEnterTree</span> notification.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">TreeExited</span></td><td><p>Emitted after the node exits the tree and is no longer active.</p><p>This signal is emitted <i>after</i> the related <span class="noLink">NotificationExitTree</span> notification.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">TreeExiting</span></td><td><p>Emitted when the node is just about to exit the tree. The node is still valid. As such, this is the right place for de-initialization (or a "destructor", if you will).</p><p>This signal is emitted <i>after</i> the node's <span class="noLink">_ExitTree<span id="LSTA7B2252C_210" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, and <i>before</i> the related <span class="noLink">NotificationExitTree</span>.</p><br />(Inherited from <span class="noLink">Node</span>)</td></tr><tr><td><span class="noLink">VisibilityChanged</span></td><td><p>Emitted when node visibility changes.</p><br />(Inherited from <span class="noLink">Node3D</span>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDPEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="e931588c-2cc1-6a60-43d5-0be35b0b3944.htm">animation_player</a></td><td> </td></tr><tr><td><a href="ff2ad83d-f5bd-8be4-bbce-ebf5ebde0e6e.htm">Interest</a></td><td><br />(Inherited from <a href="b8ae3d9a-2a2b-dcf9-9380-1170b3c520cb.htm">NetworkNode3D</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="6cecd861-32c6-6b23-8a7a-03cfb6984eac.htm">HLNC Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Events</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>