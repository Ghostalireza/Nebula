<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>NetworkRunner Class</title><meta name="Title" content="NetworkRunner" /><meta name="Help.Id" content="T:HLNC.NetworkRunner" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="HLNC" /><meta name="guid" content="T_HLNC_NetworkRunner" /><meta name="Description" content="The primary network manager for server and client." /><meta name="tocFile" content="../toc/IDC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">HLNC Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Network<wbr />Runner Class</h1><div class="summary">
            The primary network manager for server and client.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_HLNC.htm">HLNC</a><br /><strong>Assembly:</strong> HLNC (in HLNC.dll) Version: 1.0.0+e9264488a0873b3cee90d39a6afd99692fe7a268<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">NetworkRunner</span> : <span class="identifier">Node</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="noLink">GodotObject</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="noLink">Node</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">NetworkRunner</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDLEASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="M_HLNC_NetworkRunner__ctor.htm">NetworkRunner</a></td><td>Initializes a new instance of the <span class="selflink">NetworkRunner</span> class</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="ID5EASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="P_HLNC_NetworkRunner_CurrentTick.htm">CurrentTick</a></td><td>
            The current network tick. On the client side, this does not represent the server's current tick, which will always be slightly ahead.
            </td></tr><tr><td><a href="P_HLNC_NetworkRunner_InputStore.htm">InputStore</a></td><td> </td></tr><tr><td><a href="P_HLNC_NetworkRunner_Instance.htm">Instance</a></td><td> </td></tr><tr><td><a href="P_HLNC_NetworkRunner_IsServer.htm">IsServer</a></td><td> </td></tr><tr><td><a href="P_HLNC_NetworkRunner_NetStarted.htm">NetStarted</a></td><td> </td></tr><tr><td><a href="P_HLNC_NetworkRunner_ZoneInstanceId.htm">ZoneInstanceId</a></td><td>
            The current Zone ID. This is mainly used for Blastoff.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDMEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_HLNC_NetworkRunner__EnterTree.htm">_EnterTree</a></td><td><p>Called when the node enters the <span class="noLink">SceneTree</span> (e.g. upon instantiating, scene changing, or after calling <span class="noLink">AddChild(Node, Boolean, InternalMode)</span> in a script). If the node has children, its <span class="noLink">_EnterTree<span id="LSTB632CBA9_0" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> callback will be called first, and then that of the children.</p><p>Corresponds to the <span class="noLink">NotificationEnterTree</span> notification in <span class="noLink">_Notification(Int32)</span>.</p><br />(Overrides <span class="noLink">Node._EnterTree<span id="LSTB632CBA9_1" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>)</td></tr><tr><td><a href="M_HLNC_NetworkRunner__OnPeerConnected.htm">_OnPeerConnected</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner__OnPeerDisconnected.htm">_OnPeerDisconnected</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner__PhysicsProcess.htm">_PhysicsProcess</a></td><td><p>Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the <span class="parameter">delta</span> variable should be constant. <span class="parameter">delta</span> is in seconds.</p><p>It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with <span class="noLink">SetPhysicsProcess(Boolean)</span>.</p><p>Corresponds to the <span class="noLink">NotificationPhysicsProcess</span> notification in <span class="noLink">_Notification(Int32)</span>.</p><p><b>Note:</b> This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).</p><br />(Overrides <span class="noLink">Node._PhysicsProcess(Double)</span>)</td></tr><tr><td><a href="M_HLNC_NetworkRunner__Ready.htm">_Ready</a></td><td><p>Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their <span class="noLink">_Ready<span id="LSTB632CBA9_2" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> callbacks get triggered first, and the parent node will receive the ready notification afterwards.</p><p>Corresponds to the <span class="noLink">NotificationReady</span> notification in <span class="noLink">_Notification(Int32)</span>. See also the <span class="code">@onready</span> annotation for variables.</p><p>Usually used for initialization. For even earlier initialization, <span class="noLink">#ctor<span id="LSTB632CBA9_3" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> may be used. See also <span class="noLink">_EnterTree<span id="LSTB632CBA9_4" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>.</p><p><b>Note:</b> This method may be called only once for each node. After removing a node from the scene tree and adding it again, <span class="noLink">_Ready<span id="LSTB632CBA9_5" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span> will <b>not</b> be called a second time. This can be bypassed by requesting another call with <span class="noLink">RequestReady<span id="LSTB632CBA9_6" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>, which may be called anywhere before adding the node again.</p><br />(Overrides <span class="noLink">Node._Ready<span id="LSTB632CBA9_7" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>)</td></tr><tr><td><a href="M_HLNC_NetworkRunner_ChangeSceneInstance.htm">ChangeSceneInstance</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_ChangeScenePacked.htm">ChangeScenePacked</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_ChangeZone.htm">ChangeZone</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_GetAllNetworkNodes.htm">GetAllNetworkNodes</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_GetFromNetworkId.htm">GetFromNetworkId</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_InstallBlastoffClientDriver.htm">InstallBlastoffClientDriver</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_InstallBlastoffServerDriver.htm">InstallBlastoffServerDriver</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_RegisterSpawn.htm">RegisterSpawn</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_ServerProcessTick.htm">ServerProcessTick</a></td><td>
            This method is executed every tick on the Server side, and kicks off all logic which processes and sends data to every client.
            </td></tr><tr><td><a href="M_HLNC_NetworkRunner_Spawn.htm">Spawn</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_StartClient.htm">StartClient</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_StartServer.htm">StartServer</a></td><td> </td></tr><tr><td><a href="M_HLNC_NetworkRunner_TransferInput.htm">TransferInput</a></td><td> </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Events</h2><div id="IDAEASection"><table id="EventList" class="table is-hoverable"><tr><td><a href="E_HLNC_NetworkRunner_OnAfterNetworkTick.htm">OnAfterNetworkTick</a></td><td> </td></tr><tr><td><a href="E_HLNC_NetworkRunner_PlayerConnected.htm">PlayerConnected</a></td><td> </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDCEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="F_HLNC_NetworkRunner_CurrentScene.htm">CurrentScene</a></td><td> </td></tr><tr><td><a href="F_HLNC_NetworkRunner_MaxPeers.htm">MaxPeers</a></td><td>
            The maximum number of allowed connections before the server starts rejecting clients.
            </td></tr><tr><td><a href="F_HLNC_NetworkRunner_MTU.htm">MTU</a></td><td>
            Maximum Transferrable Unit. The maximum number of bytes that should be sent in a single ENet UDP Packet (i.e. a single tick)
            Not a hard limit.
            </td></tr><tr><td><a href="F_HLNC_NetworkRunner_NetworkId_counter.htm">NetworkId_counter</a></td><td> </td></tr><tr><td><a href="F_HLNC_NetworkRunner_NetworkScenes.htm">NetworkScenes</a></td><td> </td></tr><tr><td><a href="F_HLNC_NetworkRunner_PhysicsTicksPerNetworkTick.htm">PhysicsTicksPerNetworkTick</a></td><td>
            This determines how fast the network sends data. When physics runs at 60 ticks per second, then at 2 PhysicsTicksPerNetworkTick, the network runs at 30hz.
            </td></tr><tr><td><a href="F_HLNC_NetworkRunner_Port.htm">Port</a></td><td>
            The port for the server to listen on, and the client to connect to.
            </td></tr><tr><td><a href="F_HLNC_NetworkRunner_ServerAddress.htm">ServerAddress</a></td><td>
            A fully qualified domain (www.example.com) or IP address (192.168.1.1) of the host. Used for client connections.
            </td></tr><tr><td><a href="F_HLNC_NetworkRunner_TPS.htm">TPS</a></td><td>
            Ticks Per Second. The number of Ticks which are expected to elapse every second.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_HLNC.htm">HLNC Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Events</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p><a href="https://raw.githubusercontent.com/Heavenlode/HLNC/main/LICENSE" target="_blank" rel="noopener noreferrer">MIT Licensed</a></p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>